/* Generated By:JavaCC: Do not edit this line. PLSQLParser.java */
/* Copyright (C) 2002 Albert Tumanov

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

*/

package net.sourceforge.pldoc.parser;

import java.io.*;
import java.util.*;
import org.xml.sax.SAXException;
import org.w3c.dom.*;
import net.sourceforge.pldoc.*;
import uk.co.anyware.html.HTMLEscaper;
import org.xml.sax.SAXException;

public class PLSQLParser implements PLSQLParserConstants {

        /** Reserved Tags, those tags were special treated by the parser. */
        static final String[] RESERVED_TAGS = {"param", "return", "throws"};

        private XMLWriter m_out;
        private boolean ignoreInformalComments = false;
        private boolean namesUppercase = false;
        private boolean namesLowercase = false;


        /** Sets the stream to receive output XML text.
	*/
        public void setXMLWriter(XMLWriter out)
        {
                m_out = out;
        }

        /**
	* Sets to ignore informal comments (default false).
	*/
        public void setIgnoreInformalComments(boolean ignoreInformalComments)
        {
          this.ignoreInformalComments = ignoreInformalComments;
        }

        /**
	* Sets conversion of all PL/SQL identifiers to uppercase (default false).
	*/
        public void setNamesUppercase(boolean namesUppercase)
        {
          this.namesUppercase = namesUppercase;
        }

        /**
	* Sets conversion of all PL/SQL identifiers to lowercase (default false).
	*/
        public void setNamesLowercase(boolean namesLowercase)
        {
          this.namesLowercase = namesLowercase;
        }

        /** Processes a package comment.
	* Searches for possible package-level formal comment before the current token.
	* If found, generates COMMENT element for the package.
	*/
        private void processPackageComment(Token token)
      throws SAXException {
                Hashtable packageCommentTags = new Hashtable();
                String packageComment = null;

                // get the text, if present
                if (token != null && token.specialToken != null) {
                        token = token.specialToken;
                        int kind = token.kind;
                        String comment = token.toString();
                        if (comment != null && kind == FORMAL_COMMENT) {
                                CommentParser commentParser = new CommentParser(comment);
                                // get the package comment text
                                packageComment = commentParser.getText();
                                if (packageComment != null) {
                                        // extract tags from the package comment
                                        packageCommentTags.putAll(commentParser.getTags());
                                }
                        }
                }

                // print the package comment
                printPackageComment(packageComment, packageCommentTags);
        }

        /** Processes a package member.
	* Searches for possible package-level comment before the member.
	* If found, generates COMMENT element for the package.
	* For the package member, generates open tag with the given element name
	* with memberName as NAME attribute.
	* Inserts COMMENT_FIRST_LINE and COMMENT elements.
	* Closing member tag is NOT added.
	* @return table of tags found in the formal comment
	*/
        private Hashtable processMemberComment(Token token, String elementName, String memberName)
      throws SAXException {
                String commentFirstLine = null, commentAll = null;
                String packageComment = null, returnComment = null;
                Hashtable tags = new Hashtable();
                Hashtable packageCommentTags = new Hashtable();

                // Should handle multiple comment blocks ? Then use "while".
                // Otherwise, use "if".
                while (token.specialToken != null) {

                        token = token.specialToken;
                        int kind = token.kind;
                        String comment = token.toString();

                        if (comment != null && (kind == FORMAL_COMMENT || ! ignoreInformalComments)) {

                                CommentParser commentParser = new CommentParser(comment);
                                // get package comment, if any
                                packageComment = commentParser.getPackageComment();
                                if (packageComment != null) {
                                        // extract tags from package comment
                                        packageCommentTags.putAll(commentParser.getTags());
                                }

                                // only the main sentence from the first comment block is used, others are ignored
                                if (commentFirstLine == null) {
                                        commentFirstLine = commentParser.getMainSentence();
                                        if (kind != FORMAL_COMMENT) {
                                                if(ignoreInformalComments) {
                                                        // ignore informal comments
                                                        commentFirstLine = "";
                                                } else {
                                                        // informal comment may have "<" etc inside
                                                        commentFirstLine = HTMLEscaper.escape(commentFirstLine);
                                                }
                                        }
                                }

                                // only the comment text from the first comment block is used, others are ignored
                                if (commentAll == null) {
                                        commentAll = commentParser.getText();
                                        if (kind != FORMAL_COMMENT) {
                                                if(ignoreInformalComments) {
                                                        // ignore informal comments
                                                        commentAll = "";
                                                } else {
                                                        // informal comment may have "<" etc inside
                                                        commentAll = HTMLEscaper.escape(commentAll);
                                                }
                                        }
                                }

                                // tags are out together (duplicate names will be overwritten)
                                tags.putAll(commentParser.getTags());

                        }

                }

                // print package-level stuff
                printPackageComment(packageComment, packageCommentTags);

                // now start the program unit
                m_out.pushAttribute("NAME", purifyIdentifier(memberName));
                m_out.startElement(purifyIdentifier(elementName));
                if (commentFirstLine != null) {
                        m_out.startElement("COMMENT_FIRST_LINE");
                        m_out.cdata(commentFirstLine);
                        m_out.endElement("COMMENT_FIRST_LINE");
                }
                if (commentAll != null) {
                        m_out.startElement("COMMENT");
                        m_out.cdata(commentAll);
                        m_out.endElement("COMMENT");
                }
                return tags;
        }

        /** Prints the package comment into the stream.
	 *
	 * 2006-05-22 - Matthias Hendler - refactored
	 */
        private void printPackageComment(String packageComment, Hashtable packageCommentTags)
      throws SAXException {
                // print package-level stuff
                if (packageComment != null) {
                        // print package comment, it goes under PACKAGE tag
                        m_out.startElement("COMMENT");
                        m_out.cdata(packageComment);
                        m_out.endElement("COMMENT");

                        printCustomTags(packageCommentTags);
        }
    }



        /**
	* Gets the comment for the parameter named <code>paramName</code> from the table of tags.
	*
	* @param paramName	name of the parameter
	* @param tags		table of tags
	* @return		comment or <code>null</code> if comment not found
	*/
        private String getParamComment(String paramName, Hashtable tags)
        {
                String paramComment = null;
                Collection tagValues = (Collection) tags.get("@param");
                if (tagValues != null) {
                        Iterator it = tagValues.iterator();
                        while (it.hasNext()) {
                                String value = (String) it.next();

                                // extract parameter name
                                String extractedParamName = null;
                                // use tokenizer, because tokens maybe separated by spaces or tabs
                                StringTokenizer st = new StringTokenizer(value);
                                // extract parameter name, the rest is the comment
                                if (st.hasMoreTokens()) {
                                        extractedParamName = st.nextToken();
                                }

                                if (extractedParamName != null && extractedParamName.equalsIgnoreCase(paramName)) {
                                        int paramCommentStart = value.indexOf(extractedParamName) + extractedParamName.length() + 1;
                                        if (paramCommentStart < value.length()) {
                                                paramComment = value.substring(paramCommentStart).trim();
                                        }
                                        break;
        }
                        }
                }
                return paramComment;
        }

  /** Purifies an identifier: changes to uppercase, removes quotes.
  */
  private String purifyIdentifier(String name)
  {
    // change case as requested in settings
    if (namesUppercase) {
      name = name.toUpperCase();
    }
    if (namesLowercase) {
      name = name.toLowerCase();
    }

    // remove double quotes
    StringBuffer s = new StringBuffer(name);
    for (int i=0; i<s.length(); i++) {
      if (s.charAt(i) == '"') {
        s.deleteCharAt(i);
        i--;
      }
    }
    return s.toString();
  }



        /**
	 * Print all custom tags.
	 * Custom tags are those, which have NO direct link to the documented language.
	 * Linked/reserved tags are RETURN, PARAM/ARGUMENT and THROWS. 
	 * Linked tags have a link to the language cause we can automatically find the return type of a function.
	 * These linked tags will NOT be printed out to the XML document as custom tags.
	 * All other tags just have a desciptive task.
	 *
	 * 2006-05-22 - Matthias Hendler - added
	 *
	 * @param pTags		all tags
	 */
        private void printCustomTags(Map pTags) throws SAXException {
      final Iterator keyIter = pTags.keySet().iterator();
      while (keyIter.hasNext()) {
        final String key = (String) keyIter.next();
        final Collection tagValues = (Collection) pTags.get(key);
        if (tagValues != null && !isReservedTag(key)) {
          for(Iterator iter = tagValues.iterator(); iter.hasNext(); ) {
            final String comment = (String) iter.next();
                        printTag(key, comment);
          }
        }
      }
        }



        /**
	 * Is the given Tag a linked/reserved Tag?
	 *
	 * 2005-05-22 - Matthias Hendler - added
	 *
	 * @return 		TRUE: tag is one of the reserved tags.
	 */
        private boolean isReservedTag(String pTag) {
                boolean result = false;

                for (int index=0; index < RESERVED_TAGS.length; index++) {
                        result = result || RESERVED_TAGS[index].equalsIgnoreCase(pTag);
                }

                return result;
        }



        /**
	 * Add a comment tag to the current node.
	 *
	 * 2006-05-18 - Matthias Hendler - added
	 */
        private void printTag(String pTagName, String pComment) throws SAXException {
                m_out.pushAttribute("TYPE", purifyIdentifier(pTagName));
        m_out.startElement("TAG");
        if (pComment != null) {
                m_out.startElement("COMMENT");
                m_out.cdata(pComment);
                m_out.endElement("COMMENT");
        }
        m_out.endElement("TAG");
        }

  /**
   * main method, for testing only.
   * @param args
   */
  public static void main(String[] args)
      throws ParseException, SAXException {

    PLSQLParser parser = new PLSQLParser(System.in);
    parser.input();

    String s;
    s = "qwerty";
    System.out.println(s + " -> " + parser.purifyIdentifier(s));
    s = "\"qwerty\"";
    System.out.println(s + " -> " + parser.purifyIdentifier(s));
    s = "\"qwerty\".uiop";
    System.out.println(s + " -> " + parser.purifyIdentifier(s));
    s = "\"qwerty\".\"uiop\"";
    System.out.println(s + " -> " + parser.purifyIdentifier(s));
  }

// Copyright (C) 2002 Albert Tumanov
/**
 * 2006-05-22 - Matthias Hendler - Added parsing of triggers and global functions/procedures
 *                                 Refactored printing of custom tags into the XML/DOM.
 *                                 Custom tags are language independent. Reserved tags are linked
 *                                 to the documented language like RETURN, PARAM and THROWS.
 */

/**
 * 2006-05-22 - Matthias Hendler - added globalBody()
 */
  final public void input() throws ParseException, org.xml.sax.SAXException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      attachLibrary();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 4:
      case CREATE:
      case EXECUTE:
      case ON:
      case PACKAGE:
      case PUBLIC:
      case SET:
      case TO:
      case IDENTIFIER:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      if (jj_2_1(6)) {
        packageSpec();
      } else if (jj_2_2(6)) {
        packageBody();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case 4:
        case EXECUTE:
        case ON:
        case PUBLIC:
        case SET:
        case TO:
        case IDENTIFIER:
        case STRING_LITERAL:
          sqlPlusCommand();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(1);
      }
    }
    jj_consume_token(0);
  }

  final public void sqlPlusCommand() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
          jj_consume_token(2);
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case EXECUTE:
        jj_consume_token(EXECUTE);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case ON:
        jj_consume_token(ON);
        break;
      case TO:
        jj_consume_token(TO);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case 3:
        jj_consume_token(3);
        break;
      case 4:
        jj_consume_token(4);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void attachLibrary() throws ParseException {
    jj_consume_token(6);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(END);
    jj_consume_token(IDENTIFIER);
  }

/**
 * All global definitions of triggers, functions and procedures are evaluated here.
 * Every occurence goes under a new PACKAGE-Node in the XML document.
 * This happens, cause a global "block" does not have a definied start and end token 
 * like a package specification or a package body.
 * Thats why every construct is handled like a new part of the global package.
 * To overcome this problem, I could use an infinity lookahead - which should solve the problem 
 * and slow down the whole parsing.
 * Another idea would be to lookahead the next tokens and decide wether they belong to a package definition or not.
 * Then I could decide to stay in this global parsing state. By now lookahead gives the parser a hint to
 * choose the correct way on a given base. So we can't negate it easily.
 * On the other hand I could also hold the global state in a global variable. 
 * But this does not seems the correct way to solve the problem, I think.
 *
 * 2006-05-17 - Matthias Hendler - added
 */
  final public void global() throws ParseException, SAXException {
        Token name = null;
                if (m_out != null)
                {
                        // now start printing the package
                        m_out.pushAttribute("NAME", "_GLOBAL");
                        m_out.pushAttribute("SCHEMA", "");
                        m_out.startElement("PACKAGE");
                }
    if (jj_2_4(2147483647)) {
      globalBlock();
    } else if (jj_2_5(4)) {
      programUnit(true);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
      case TRIGGER:
        triggerUnit();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if (m_out != null)
                {
                        m_out.endElement("PACKAGE");
                }
  }

/**
 * Static blocks like package initializers.
 * 
 * 2006-05-17 - Matthias Hendler - added
 */
  final public void globalBlock() throws ParseException, SAXException {
        Token name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      jj_consume_token(DECLARE);
      declarativeSection(false);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 11:
      case 20:
      case 21:
      case REPLACE:
      case BEGIN:
      case BODY:
      case CLOSE:
      case COMMIT:
      case DECLARE:
      case DELETE:
      case EXECUTE:
      case EXIT:
      case FALSE:
      case FETCH:
      case FOR:
      case FORALL:
      case GOTO:
      case IF:
      case INSERT:
      case INTERVAL:
      case LOCK:
      case LOOP:
      case MERGE:
      case MOD:
      case NEW:
      case NOT:
      case NULL:
      case OPEN:
      case OPERATOR:
      case PRIVATE:
      case RAISE:
      case RAW:
      case RETURN:
      case ROLLBACK:
      case SAVEPOINT:
      case SELECT:
      case SET:
      case SQL:
      case SQLCODE:
      case SQLERRM:
      case SYSDATE:
      case TRUE:
      case TYPE:
      case WHILE:
      case UPDATE:
      case INT:
      case STRING:
      case OLD:
      case IDENTIFIER:
      case UNSIGNED_NUMERIC_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCEPTION:
      exceptionHandler();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(5);
  }

  final public void packageSpec() throws ParseException, SAXException {
  Token schema = null, name = null, tokenCreate = null, tokenPackage = null, tokenIsAs = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      tokenCreate = jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        jj_consume_token(REPLACE);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    tokenPackage = jj_consume_token(PACKAGE);
    if (jj_2_6(2)) {
      schema = ID();
      jj_consume_token(2);
    } else {
      ;
    }
    name = ID();
                if (m_out != null)
                {
                        String schemaString = "";
                        if (schema != null) {
                                schemaString = schema.toString();
                        }
                        // now start printing the package
                        m_out.pushAttribute("NAME", purifyIdentifier(name.toString()));
                        m_out.pushAttribute("SCHEMA", purifyIdentifier(schemaString.toString()));
                        m_out.startElement("PACKAGE");
                }
                // possibly, package comment is here
                processPackageComment(tokenCreate);
                processPackageComment(tokenPackage);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTHID:
      tokenIsAs = jj_consume_token(AUTHID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURRENT_USER:
        jj_consume_token(CURRENT_USER);
        break;
      case DEFINER:
        jj_consume_token(DEFINER);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
                // possibly, package comment is here
                processPackageComment(tokenIsAs);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      tokenIsAs = jj_consume_token(IS);
      break;
    case AS:
      tokenIsAs = jj_consume_token(AS);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                // possibly, package comment is here
                processPackageComment(tokenIsAs);
    declarativeSection(true);
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPLACE:
    case DEFINER:
    case CURRENT_USER:
    case SERIALLY_REUSABLE:
    case RESTRICT_REFERENCES:
    case EXCEPTION_INIT:
    case AUTONOMOUS_TRANSACTION:
    case LANGUAGE:
    case ALL:
    case ALTER:
    case AND:
    case ANY:
    case ARRAY:
    case AS:
    case ASC:
    case AT:
    case AUTHID:
    case AVG:
    case BETWEEN:
    case BINARY_INTEGER:
    case BODY:
    case BOOLEAN:
    case BULK:
    case BY:
    case CASE:
    case CHAR:
    case CHAR_BASE:
    case CHECK:
    case CLOSE:
    case CLUSTER:
    case COALESCE:
    case COLLECT:
    case COMMENT:
    case COMMIT:
    case COMPRESS:
    case CONNECT:
    case CONSTANT:
    case CREATE:
    case CURRENT:
    case CURRVAL:
    case CURSOR:
    case DATE:
    case DAY:
    case DECLARE:
    case DECIMAL:
    case _DEFAULT:
    case DELETE:
    case DESC:
    case DISTINCT:
    case DO:
    case DROP:
    case ELSE:
    case ELSIF:
    case EXCEPTION:
    case EXCLUSIVE:
    case EXECUTE:
    case EXISTS:
    case EXIT:
    case EXTENDS:
    case EXTRACT:
    case FALSE:
    case FETCH:
    case FLOAT:
    case FOR:
    case FORALL:
    case FROM:
    case GOTO:
    case GROUP:
    case HAVING:
    case HEAP:
    case HOUR:
    case IF:
    case IMMEDIATE:
    case IN:
    case INDEX:
    case INDICATOR:
    case INSERT:
    case INTEGER:
    case INTERFACE:
    case INTERSECT:
    case INTERVAL:
    case INTO:
    case IS:
    case ISOLATION:
    case JAVA:
    case LEVEL:
    case LIKE:
    case LIMITED:
    case LOCK:
    case LONG:
    case LOOP:
    case MAX:
    case MIN:
    case MINUS:
    case MINUTE:
    case MLSLABEL:
    case MOD:
    case MODE:
    case MONTH:
    case NATURAL:
    case NATURALN:
    case NEW:
    case NEXTVAL:
    case NOCOPY:
    case NOT:
    case NOWAIT:
    case NULL:
    case NULLIF:
    case NUMBER:
    case NUMBER_BASE:
    case OCIROWID:
    case OF:
    case ON:
    case OPAQUE:
    case OPEN:
    case OPERATOR:
    case OPTION:
    case OR:
    case ORDER:
    case ORGANIZATION:
    case OTHERS:
    case OUT:
    case PACKAGE:
    case PARTITION:
    case PCTFREE:
    case PLS_INTEGER:
    case POSITIVE:
    case POSITIVEN:
    case PRIOR:
    case PRIVATE:
    case PUBLIC:
    case RAISE:
    case RANGE:
    case RAW:
    case REAL:
    case RECORD:
    case REF:
    case RELEASE:
    case RETURN:
    case REVERSE:
    case ROLLBACK:
    case ROW:
    case ROWID:
    case ROWNUM:
    case ROWTYPE:
    case SAVEPOINT:
    case SECOND:
    case SELECT:
    case SEPARATE:
    case SET:
    case SHARE:
    case SMALLINT:
    case SPACE:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case START:
    case STDDEV:
    case SUBTYPE:
    case SUCCESSFUL:
    case SUM:
    case SYNONYM:
    case SYSDATE:
    case TABLE:
    case THEN:
    case TIME:
    case TIMESTAMP:
    case TIMEZONE_REGION:
    case TIMEZONE_ABBR:
    case TIMEZONE_MINUTE:
    case TIMEZONE_HOUR:
    case TO:
    case TRIGGER:
    case TRUE:
    case TYPE:
    case UI:
    case WHILE:
    case UPDATE:
    case VARCHAR:
    case VARCHAR2:
    case DOUBLE:
    case DEC:
    case PRECISION:
    case INT:
    case NUMERIC:
    case SIGNTYPE:
    case NCHAR:
    case NVARCHAR2:
    case STRING:
    case UROWID:
    case VARRAY:
    case VARYING:
    case BFILE:
    case BLOB:
    case CLOB:
    case NCLOB:
    case YEAR:
    case LOCAL:
    case WITH:
    case ZONE:
    case CHARACTER:
    case OLD:
    case PARENT:
    case IDENTIFIER:
      ID();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(5);
                if (m_out != null) m_out.endElement("PACKAGE");
  }

  final public void packageBody() throws ParseException, SAXException {
  Token name=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        jj_consume_token(REPLACE);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(PACKAGE);
    jj_consume_token(BODY);
    if (jj_2_7(2)) {
      ID();
      jj_consume_token(2);
    } else {
      ;
    }
    name = ID();
                if (m_out != null)
                {
                        m_out.pushAttribute("NAME", purifyIdentifier(name.toString()));
                        m_out.startElement("PACKAGE_BODY");
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      break;
    case AS:
      jj_consume_token(AS);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    declarativeSection(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      jj_consume_token(BEGIN);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case 11:
        case 20:
        case 21:
        case REPLACE:
        case BEGIN:
        case BODY:
        case CLOSE:
        case COMMIT:
        case DECLARE:
        case DELETE:
        case EXECUTE:
        case EXIT:
        case FALSE:
        case FETCH:
        case FOR:
        case FORALL:
        case GOTO:
        case IF:
        case INSERT:
        case INTERVAL:
        case LOCK:
        case LOOP:
        case MERGE:
        case MOD:
        case NEW:
        case NOT:
        case NULL:
        case OPEN:
        case OPERATOR:
        case PRIVATE:
        case RAISE:
        case RAW:
        case RETURN:
        case ROLLBACK:
        case SAVEPOINT:
        case SELECT:
        case SET:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case SYSDATE:
        case TRUE:
        case TYPE:
        case WHILE:
        case UPDATE:
        case INT:
        case STRING:
        case OLD:
        case IDENTIFIER:
        case UNSIGNED_NUMERIC_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        statement();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCEPTION:
        exceptionHandler();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPLACE:
    case DEFINER:
    case CURRENT_USER:
    case SERIALLY_REUSABLE:
    case RESTRICT_REFERENCES:
    case EXCEPTION_INIT:
    case AUTONOMOUS_TRANSACTION:
    case LANGUAGE:
    case ALL:
    case ALTER:
    case AND:
    case ANY:
    case ARRAY:
    case AS:
    case ASC:
    case AT:
    case AUTHID:
    case AVG:
    case BETWEEN:
    case BINARY_INTEGER:
    case BODY:
    case BOOLEAN:
    case BULK:
    case BY:
    case CASE:
    case CHAR:
    case CHAR_BASE:
    case CHECK:
    case CLOSE:
    case CLUSTER:
    case COALESCE:
    case COLLECT:
    case COMMENT:
    case COMMIT:
    case COMPRESS:
    case CONNECT:
    case CONSTANT:
    case CREATE:
    case CURRENT:
    case CURRVAL:
    case CURSOR:
    case DATE:
    case DAY:
    case DECLARE:
    case DECIMAL:
    case _DEFAULT:
    case DELETE:
    case DESC:
    case DISTINCT:
    case DO:
    case DROP:
    case ELSE:
    case ELSIF:
    case EXCEPTION:
    case EXCLUSIVE:
    case EXECUTE:
    case EXISTS:
    case EXIT:
    case EXTENDS:
    case EXTRACT:
    case FALSE:
    case FETCH:
    case FLOAT:
    case FOR:
    case FORALL:
    case FROM:
    case GOTO:
    case GROUP:
    case HAVING:
    case HEAP:
    case HOUR:
    case IF:
    case IMMEDIATE:
    case IN:
    case INDEX:
    case INDICATOR:
    case INSERT:
    case INTEGER:
    case INTERFACE:
    case INTERSECT:
    case INTERVAL:
    case INTO:
    case IS:
    case ISOLATION:
    case JAVA:
    case LEVEL:
    case LIKE:
    case LIMITED:
    case LOCK:
    case LONG:
    case LOOP:
    case MAX:
    case MIN:
    case MINUS:
    case MINUTE:
    case MLSLABEL:
    case MOD:
    case MODE:
    case MONTH:
    case NATURAL:
    case NATURALN:
    case NEW:
    case NEXTVAL:
    case NOCOPY:
    case NOT:
    case NOWAIT:
    case NULL:
    case NULLIF:
    case NUMBER:
    case NUMBER_BASE:
    case OCIROWID:
    case OF:
    case ON:
    case OPAQUE:
    case OPEN:
    case OPERATOR:
    case OPTION:
    case OR:
    case ORDER:
    case ORGANIZATION:
    case OTHERS:
    case OUT:
    case PACKAGE:
    case PARTITION:
    case PCTFREE:
    case PLS_INTEGER:
    case POSITIVE:
    case POSITIVEN:
    case PRIOR:
    case PRIVATE:
    case PUBLIC:
    case RAISE:
    case RANGE:
    case RAW:
    case REAL:
    case RECORD:
    case REF:
    case RELEASE:
    case RETURN:
    case REVERSE:
    case ROLLBACK:
    case ROW:
    case ROWID:
    case ROWNUM:
    case ROWTYPE:
    case SAVEPOINT:
    case SECOND:
    case SELECT:
    case SEPARATE:
    case SET:
    case SHARE:
    case SMALLINT:
    case SPACE:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case START:
    case STDDEV:
    case SUBTYPE:
    case SUCCESSFUL:
    case SUM:
    case SYNONYM:
    case SYSDATE:
    case TABLE:
    case THEN:
    case TIME:
    case TIMESTAMP:
    case TIMEZONE_REGION:
    case TIMEZONE_ABBR:
    case TIMEZONE_MINUTE:
    case TIMEZONE_HOUR:
    case TO:
    case TRIGGER:
    case TRUE:
    case TYPE:
    case UI:
    case WHILE:
    case UPDATE:
    case VARCHAR:
    case VARCHAR2:
    case DOUBLE:
    case DEC:
    case PRECISION:
    case INT:
    case NUMERIC:
    case SIGNTYPE:
    case NCHAR:
    case NVARCHAR2:
    case STRING:
    case UROWID:
    case VARRAY:
    case VARYING:
    case BFILE:
    case BLOB:
    case CLOB:
    case NCLOB:
    case YEAR:
    case LOCAL:
    case WITH:
    case ZONE:
    case CHARACTER:
    case OLD:
    case PARENT:
    case IDENTIFIER:
      ID();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(5);
                if (m_out != null) m_out.endElement("PACKAGE_BODY");
  }

  final public void declarativeSection(boolean isPackageLevel) throws ParseException, SAXException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPLACE:
      case DEFINER:
      case CURRENT_USER:
      case SERIALLY_REUSABLE:
      case RESTRICT_REFERENCES:
      case EXCEPTION_INIT:
      case AUTONOMOUS_TRANSACTION:
      case LANGUAGE:
      case ALL:
      case ALTER:
      case AND:
      case ANY:
      case ARRAY:
      case AS:
      case ASC:
      case AT:
      case AUTHID:
      case AVG:
      case BETWEEN:
      case BINARY_INTEGER:
      case BODY:
      case BOOLEAN:
      case BULK:
      case BY:
      case CASE:
      case CHAR:
      case CHAR_BASE:
      case CHECK:
      case CLOSE:
      case CLUSTER:
      case COALESCE:
      case COLLECT:
      case COMMENT:
      case COMMIT:
      case COMPRESS:
      case CONNECT:
      case CONSTANT:
      case CREATE:
      case CURRENT:
      case CURRVAL:
      case CURSOR:
      case DATE:
      case DAY:
      case DECLARE:
      case DECIMAL:
      case _DEFAULT:
      case DELETE:
      case DESC:
      case DISTINCT:
      case DO:
      case DROP:
      case ELSE:
      case ELSIF:
      case EXCEPTION:
      case EXCLUSIVE:
      case EXECUTE:
      case EXISTS:
      case EXIT:
      case EXTENDS:
      case EXTRACT:
      case FALSE:
      case FETCH:
      case FLOAT:
      case FOR:
      case FORALL:
      case FROM:
      case FUNCTION:
      case GOTO:
      case GROUP:
      case HAVING:
      case HEAP:
      case HOUR:
      case IF:
      case IMMEDIATE:
      case IN:
      case INDEX:
      case INDICATOR:
      case INSERT:
      case INTEGER:
      case INTERFACE:
      case INTERSECT:
      case INTERVAL:
      case INTO:
      case IS:
      case ISOLATION:
      case JAVA:
      case LEVEL:
      case LIKE:
      case LIMITED:
      case LOCK:
      case LONG:
      case LOOP:
      case MAX:
      case MIN:
      case MINUS:
      case MINUTE:
      case MLSLABEL:
      case MOD:
      case MODE:
      case MONTH:
      case NATURAL:
      case NATURALN:
      case NEW:
      case NEXTVAL:
      case NOCOPY:
      case NOT:
      case NOWAIT:
      case NULL:
      case NULLIF:
      case NUMBER:
      case NUMBER_BASE:
      case OCIROWID:
      case OF:
      case ON:
      case OPAQUE:
      case OPEN:
      case OPERATOR:
      case OPTION:
      case OR:
      case ORDER:
      case ORGANIZATION:
      case OTHERS:
      case OUT:
      case PACKAGE:
      case PARTITION:
      case PCTFREE:
      case PLS_INTEGER:
      case POSITIVE:
      case POSITIVEN:
      case PRAGMA:
      case PRIOR:
      case PRIVATE:
      case PROCEDURE:
      case PUBLIC:
      case RAISE:
      case RANGE:
      case RAW:
      case REAL:
      case RECORD:
      case REF:
      case RELEASE:
      case RETURN:
      case REVERSE:
      case ROLLBACK:
      case ROW:
      case ROWID:
      case ROWNUM:
      case ROWTYPE:
      case SAVEPOINT:
      case SECOND:
      case SELECT:
      case SEPARATE:
      case SET:
      case SHARE:
      case SMALLINT:
      case SPACE:
      case SQL:
      case SQLCODE:
      case SQLERRM:
      case START:
      case STDDEV:
      case SUBTYPE:
      case SUCCESSFUL:
      case SUM:
      case SYNONYM:
      case SYSDATE:
      case TABLE:
      case THEN:
      case TIME:
      case TIMESTAMP:
      case TIMEZONE_REGION:
      case TIMEZONE_ABBR:
      case TIMEZONE_MINUTE:
      case TIMEZONE_HOUR:
      case TO:
      case TRIGGER:
      case TRUE:
      case TYPE:
      case UI:
      case WHILE:
      case UPDATE:
      case VARCHAR:
      case VARCHAR2:
      case DOUBLE:
      case DEC:
      case PRECISION:
      case INT:
      case NUMERIC:
      case SIGNTYPE:
      case NCHAR:
      case NVARCHAR2:
      case STRING:
      case UROWID:
      case VARRAY:
      case VARYING:
      case BFILE:
      case BLOB:
      case CLOB:
      case NCLOB:
      case YEAR:
      case LOCAL:
      case WITH:
      case ZONE:
      case CHARACTER:
      case OLD:
      case PARENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRAGMA:
        pragma(isPackageLevel);
        break;
      default:
        jj_la1[25] = jj_gen;
        if (jj_2_8(2)) {
          exceptionDeclaration(isPackageLevel);
        } else if (jj_2_9(2)) {
          subtype_definition(isPackageLevel);
        } else if (jj_2_10(4)) {
          variableOrConstantDeclaration(isPackageLevel);
        } else if (jj_2_11(2)) {
          cursorSpec(isPackageLevel);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CURSOR:
            cursorBody(isPackageLevel);
            break;
          case IDENTIFIER:
            collectionDeclaration(isPackageLevel);
            break;
          case CREATE:
          case FUNCTION:
          case PROCEDURE:
            programUnit(isPackageLevel);
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

/**
 * 2006-05-22 - Matthias Hendler - Printing of custom tag "@deprecated" removed.
 *                                 Printing of any custom tag added. Now user can define his own
 *								   custom tags which he can evaluate in the XSLT.
 *                                 This methode also documents global functions/procedures.
 */
  final public void programUnit(boolean isPackageLevel) throws ParseException, SAXException {
        Token start, name;
        Token globalStart = null;
        Token startToken = null;
        String memberName = null;
        String type = null;
        Hashtable tags;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      globalStart = jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        jj_consume_token(REPLACE);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      start = jj_consume_token(FUNCTION);
      break;
    case PROCEDURE:
      start = jj_consume_token(PROCEDURE);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_12(2)) {
      ID();
      jj_consume_token(2);
    } else {
      ;
    }
    name = ID();
                // element generated only on the package level
                if (m_out != null && isPackageLevel) {
                        memberName = start.toString().toUpperCase();
                        startToken = (globalStart == null) ? start : globalStart;
                        tags = processMemberComment(startToken, memberName, name.toString());
                } else {
                        tags = new Hashtable();
                }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      jj_consume_token(3);
      parameterDeclaration(tags,isPackageLevel);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_9;
        }
        jj_consume_token(7);
        parameterDeclaration(tags,isPackageLevel);
      }
      jj_consume_token(4);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      type = datatype();
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        // @return
                        String returnComment = null;
                        Collection tagValues = (Collection) tags.get("@return");
                        if (tagValues != null)
                        {
                                for(Iterator it = tagValues.iterator(); it.hasNext(); )
                                        returnComment = (String) it.next();
                        }
                        m_out.pushAttribute("TYPE", purifyIdentifier(type.toString()));
                        m_out.startElement("RETURN");
                        if (returnComment != null)
                        {
                                m_out.startElement("COMMENT");
                                m_out.cdata(returnComment);
                                m_out.endElement("COMMENT");
                        }
                        m_out.endElement("RETURN");
                }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        // @throws
                        String throwsComment = null;
                        String exceptionName = null;
                        Collection tagValues = (Collection) tags.get("@throws");
                        if (tagValues != null)
                        {
                                Iterator it = tagValues.iterator();
                                while(it.hasNext()) {
                                        throwsComment = (String) it.next();
                                        // extract when first word - it's the exception name
                                        StringTokenizer st = new StringTokenizer(throwsComment);
                                        if (st.hasMoreTokens())
                                                 exceptionName = st.nextToken();
                                        if (exceptionName != null)
                                        {
                                                m_out.pushAttribute("NAME", purifyIdentifier(exceptionName));
                                                m_out.startElement("THROWS");
                                                if (throwsComment != null)
                                                {
                                                        m_out.startElement("COMMENT");
                                                        m_out.cdata(throwsComment.substring(exceptionName.length()));
                                                        m_out.endElement("COMMENT");
                                                }
                                                m_out.endElement("THROWS");
                                        }
                                }
                        }
                }

                // now print all custom tags
                if (m_out != null && isPackageLevel)
                {
                        printCustomTags(tags);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINISTIC:
      jj_consume_token(DETERMINISTIC);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARALLEL_ENABLE:
      jj_consume_token(PARALLEL_ENABLE);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PIPELINED:
      jj_consume_token(PIPELINED);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case IS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        jj_consume_token(IS);
        break;
      case AS:
        jj_consume_token(AS);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_13(2)) {
        callSpecTail(isPackageLevel);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REPLACE:
        case DEFINER:
        case CURRENT_USER:
        case SERIALLY_REUSABLE:
        case RESTRICT_REFERENCES:
        case EXCEPTION_INIT:
        case AUTONOMOUS_TRANSACTION:
        case LANGUAGE:
        case ALL:
        case ALTER:
        case AND:
        case ANY:
        case ARRAY:
        case AS:
        case ASC:
        case AT:
        case AUTHID:
        case AVG:
        case BEGIN:
        case BETWEEN:
        case BINARY_INTEGER:
        case BODY:
        case BOOLEAN:
        case BULK:
        case BY:
        case CASE:
        case CHAR:
        case CHAR_BASE:
        case CHECK:
        case CLOSE:
        case CLUSTER:
        case COALESCE:
        case COLLECT:
        case COMMENT:
        case COMMIT:
        case COMPRESS:
        case CONNECT:
        case CONSTANT:
        case CREATE:
        case CURRENT:
        case CURRVAL:
        case CURSOR:
        case DATE:
        case DAY:
        case DECLARE:
        case DECIMAL:
        case _DEFAULT:
        case DELETE:
        case DESC:
        case DISTINCT:
        case DO:
        case DROP:
        case ELSE:
        case ELSIF:
        case EXCEPTION:
        case EXCLUSIVE:
        case EXECUTE:
        case EXISTS:
        case EXIT:
        case EXTENDS:
        case EXTRACT:
        case FALSE:
        case FETCH:
        case FLOAT:
        case FOR:
        case FORALL:
        case FROM:
        case FUNCTION:
        case GOTO:
        case GROUP:
        case HAVING:
        case HEAP:
        case HOUR:
        case IF:
        case IMMEDIATE:
        case IN:
        case INDEX:
        case INDICATOR:
        case INSERT:
        case INTEGER:
        case INTERFACE:
        case INTERSECT:
        case INTERVAL:
        case INTO:
        case IS:
        case ISOLATION:
        case JAVA:
        case LEVEL:
        case LIKE:
        case LIMITED:
        case LOCK:
        case LONG:
        case LOOP:
        case MAX:
        case MIN:
        case MINUS:
        case MINUTE:
        case MLSLABEL:
        case MOD:
        case MODE:
        case MONTH:
        case NATURAL:
        case NATURALN:
        case NEW:
        case NEXTVAL:
        case NOCOPY:
        case NOT:
        case NOWAIT:
        case NULL:
        case NULLIF:
        case NUMBER:
        case NUMBER_BASE:
        case OCIROWID:
        case OF:
        case ON:
        case OPAQUE:
        case OPEN:
        case OPERATOR:
        case OPTION:
        case OR:
        case ORDER:
        case ORGANIZATION:
        case OTHERS:
        case OUT:
        case PACKAGE:
        case PARTITION:
        case PCTFREE:
        case PLS_INTEGER:
        case POSITIVE:
        case POSITIVEN:
        case PRAGMA:
        case PRIOR:
        case PRIVATE:
        case PROCEDURE:
        case PUBLIC:
        case RAISE:
        case RANGE:
        case RAW:
        case REAL:
        case RECORD:
        case REF:
        case RELEASE:
        case RETURN:
        case REVERSE:
        case ROLLBACK:
        case ROW:
        case ROWID:
        case ROWNUM:
        case ROWTYPE:
        case SAVEPOINT:
        case SECOND:
        case SELECT:
        case SEPARATE:
        case SET:
        case SHARE:
        case SMALLINT:
        case SPACE:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case START:
        case STDDEV:
        case SUBTYPE:
        case SUCCESSFUL:
        case SUM:
        case SYNONYM:
        case SYSDATE:
        case TABLE:
        case THEN:
        case TIME:
        case TIMESTAMP:
        case TIMEZONE_REGION:
        case TIMEZONE_ABBR:
        case TIMEZONE_MINUTE:
        case TIMEZONE_HOUR:
        case TO:
        case TRIGGER:
        case TRUE:
        case TYPE:
        case UI:
        case WHILE:
        case UPDATE:
        case VARCHAR:
        case VARCHAR2:
        case DOUBLE:
        case DEC:
        case PRECISION:
        case INT:
        case NUMERIC:
        case SIGNTYPE:
        case NCHAR:
        case NVARCHAR2:
        case STRING:
        case UROWID:
        case VARRAY:
        case VARYING:
        case BFILE:
        case BLOB:
        case CLOB:
        case NCLOB:
        case YEAR:
        case LOCAL:
        case WITH:
        case ZONE:
        case CHARACTER:
        case OLD:
        case PARENT:
        case IDENTIFIER:
          declarativeSection(false);
          jj_consume_token(BEGIN);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 11:
            case 20:
            case 21:
            case REPLACE:
            case BEGIN:
            case BODY:
            case CLOSE:
            case COMMIT:
            case DECLARE:
            case DELETE:
            case EXECUTE:
            case EXIT:
            case FALSE:
            case FETCH:
            case FOR:
            case FORALL:
            case GOTO:
            case IF:
            case INSERT:
            case INTERVAL:
            case LOCK:
            case LOOP:
            case MERGE:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPEN:
            case OPERATOR:
            case PRIVATE:
            case RAISE:
            case RAW:
            case RETURN:
            case ROLLBACK:
            case SAVEPOINT:
            case SELECT:
            case SET:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case WHILE:
            case UPDATE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              ;
              break;
            default:
              jj_la1[37] = jj_gen;
              break label_10;
            }
            statement();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXCEPTION:
            exceptionHandler();
            break;
          default:
            jj_la1[38] = jj_gen;
            ;
          }
          jj_consume_token(END);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case REPLACE:
          case DEFINER:
          case CURRENT_USER:
          case SERIALLY_REUSABLE:
          case RESTRICT_REFERENCES:
          case EXCEPTION_INIT:
          case AUTONOMOUS_TRANSACTION:
          case LANGUAGE:
          case ALL:
          case ALTER:
          case AND:
          case ANY:
          case ARRAY:
          case AS:
          case ASC:
          case AT:
          case AUTHID:
          case AVG:
          case BETWEEN:
          case BINARY_INTEGER:
          case BODY:
          case BOOLEAN:
          case BULK:
          case BY:
          case CASE:
          case CHAR:
          case CHAR_BASE:
          case CHECK:
          case CLOSE:
          case CLUSTER:
          case COALESCE:
          case COLLECT:
          case COMMENT:
          case COMMIT:
          case COMPRESS:
          case CONNECT:
          case CONSTANT:
          case CREATE:
          case CURRENT:
          case CURRVAL:
          case CURSOR:
          case DATE:
          case DAY:
          case DECLARE:
          case DECIMAL:
          case _DEFAULT:
          case DELETE:
          case DESC:
          case DISTINCT:
          case DO:
          case DROP:
          case ELSE:
          case ELSIF:
          case EXCEPTION:
          case EXCLUSIVE:
          case EXECUTE:
          case EXISTS:
          case EXIT:
          case EXTENDS:
          case EXTRACT:
          case FALSE:
          case FETCH:
          case FLOAT:
          case FOR:
          case FORALL:
          case FROM:
          case GOTO:
          case GROUP:
          case HAVING:
          case HEAP:
          case HOUR:
          case IF:
          case IMMEDIATE:
          case IN:
          case INDEX:
          case INDICATOR:
          case INSERT:
          case INTEGER:
          case INTERFACE:
          case INTERSECT:
          case INTERVAL:
          case INTO:
          case IS:
          case ISOLATION:
          case JAVA:
          case LEVEL:
          case LIKE:
          case LIMITED:
          case LOCK:
          case LONG:
          case LOOP:
          case MAX:
          case MIN:
          case MINUS:
          case MINUTE:
          case MLSLABEL:
          case MOD:
          case MODE:
          case MONTH:
          case NATURAL:
          case NATURALN:
          case NEW:
          case NEXTVAL:
          case NOCOPY:
          case NOT:
          case NOWAIT:
          case NULL:
          case NULLIF:
          case NUMBER:
          case NUMBER_BASE:
          case OCIROWID:
          case OF:
          case ON:
          case OPAQUE:
          case OPEN:
          case OPERATOR:
          case OPTION:
          case OR:
          case ORDER:
          case ORGANIZATION:
          case OTHERS:
          case OUT:
          case PACKAGE:
          case PARTITION:
          case PCTFREE:
          case PLS_INTEGER:
          case POSITIVE:
          case POSITIVEN:
          case PRIOR:
          case PRIVATE:
          case PUBLIC:
          case RAISE:
          case RANGE:
          case RAW:
          case REAL:
          case RECORD:
          case REF:
          case RELEASE:
          case RETURN:
          case REVERSE:
          case ROLLBACK:
          case ROW:
          case ROWID:
          case ROWNUM:
          case ROWTYPE:
          case SAVEPOINT:
          case SECOND:
          case SELECT:
          case SEPARATE:
          case SET:
          case SHARE:
          case SMALLINT:
          case SPACE:
          case SQL:
          case SQLCODE:
          case SQLERRM:
          case START:
          case STDDEV:
          case SUBTYPE:
          case SUCCESSFUL:
          case SUM:
          case SYNONYM:
          case SYSDATE:
          case TABLE:
          case THEN:
          case TIME:
          case TIMESTAMP:
          case TIMEZONE_REGION:
          case TIMEZONE_ABBR:
          case TIMEZONE_MINUTE:
          case TIMEZONE_HOUR:
          case TO:
          case TRIGGER:
          case TRUE:
          case TYPE:
          case UI:
          case WHILE:
          case UPDATE:
          case VARCHAR:
          case VARCHAR2:
          case DOUBLE:
          case DEC:
          case PRECISION:
          case INT:
          case NUMERIC:
          case SIGNTYPE:
          case NCHAR:
          case NVARCHAR2:
          case STRING:
          case UROWID:
          case VARRAY:
          case VARYING:
          case BFILE:
          case BLOB:
          case CLOB:
          case NCLOB:
          case YEAR:
          case LOCAL:
          case WITH:
          case ZONE:
          case CHARACTER:
          case OLD:
          case PARENT:
          case IDENTIFIER:
            ID();
            break;
          default:
            jj_la1[39] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(5);
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        m_out.endElement(purifyIdentifier(start.toString().toUpperCase()));
                }
  }

  final public void parameterDeclaration(Hashtable tags,boolean isPackageLevel) throws ParseException, SAXException {
        Token name;
        String paramMode = "", paramType, paramDefault = "";
    name = ID();
    if (jj_2_16(2)) {
      if (jj_2_15(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUT:
          jj_consume_token(OUT);
                                               paramMode = "OUT";
          break;
        case IN:
          jj_consume_token(IN);
          jj_consume_token(OUT);
                                                                               paramMode = "IN OUT";
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_14(2)) {
          jj_consume_token(NOCOPY);
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          jj_consume_token(IN);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
    paramType = datatype();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case _DEFAULT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        jj_consume_token(8);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      paramDefault = Expression();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
                if (m_out != null && isPackageLevel)
                {
                        String paramName = name.toString();
                        String paramComment = getParamComment(paramName, tags);
                        m_out.pushAttribute("NAME", purifyIdentifier(paramName));
                        m_out.pushAttribute("MODE", paramMode);
                        m_out.pushAttribute("TYPE", purifyIdentifier(paramType));
                        m_out.pushAttribute("DEFAULT", purifyIdentifier(paramDefault));
                        m_out.startElement("ARGUMENT");
                        if (paramComment != null) {
                                m_out.startElement("COMMENT");
                                m_out.cdata(paramComment);
                                m_out.endElement("COMMENT");
                        }
                        m_out.endElement("ARGUMENT");
                }
  }

/** 
 * Trigger
 * Triggers are always outside of a package.
 *
 *  2006-05-17 - Matthias Hendler - added 
 */
  final public void triggerUnit() throws ParseException, SAXException {
        Token start = null;
        Token node;
        Token name;
        Token table;
        Token dec_start;
        Token dec_end;
        StringBuffer declaration = new StringBuffer();
        Hashtable tags = new Hashtable();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      start = jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        jj_consume_token(REPLACE);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    node = jj_consume_token(TRIGGER);
    if (jj_2_17(2)) {
      ID();
      jj_consume_token(2);
    } else {
      ;
    }
    name = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEFORE:
      dec_start = jj_consume_token(BEFORE);
      break;
    case AFTER:
      dec_start = jj_consume_token(AFTER);
      break;
    case INSTEADOF:
      dec_start = jj_consume_token(INSTEADOF);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case INSERT:
      jj_consume_token(INSERT);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_11;
      }
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
        jj_consume_token(DELETE);
        break;
      case INSERT:
        jj_consume_token(INSERT);
        break;
      case UPDATE:
        jj_consume_token(UPDATE);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_18(6)) {
        jj_consume_token(OF);
        jj_consume_token(IDENTIFIER);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
            ;
            break;
          default:
            jj_la1[52] = jj_gen;
            break label_12;
          }
          jj_consume_token(7);
          jj_consume_token(IDENTIFIER);
        }
      } else {
        ;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OF:
      jj_consume_token(OF);
      jj_consume_token(IDENTIFIER);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_13;
        }
        jj_consume_token(7);
        jj_consume_token(IDENTIFIER);
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    dec_end = jj_consume_token(ON);
    table = ID();
                // Read the declaration part of the trigger
                Token runner = dec_start;
                while(runner != dec_end) {
                        declaration.append(runner.image);
                        declaration.append(" ");
                        runner = runner.next;
                }

                if (m_out != null) {
                        final String fullname = table.toString()+"."+name.toString();
                        tags = processMemberComment(start, node.toString().toUpperCase(), fullname);

                        // print the parsed declaration
                        m_out.pushAttribute("TEXT", declaration.toString());
                        m_out.startElement("DECLARATION");
                        m_out.endElement("DECLARATION");

                        // print custom tags		
                        printCustomTags(tags);

                } else {
                        tags = new Hashtable();
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCING:
      jj_consume_token(REFERENCING);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OLD:
          jj_consume_token(OLD);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case PARENT:
          jj_consume_token(PARENT);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(AS);
        ID();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case OLD:
        case PARENT:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_14;
        }
      }
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOREACHROW:
      jj_consume_token(FOREACHROW);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      label_15:
      while (true) {
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case REPLACE:
        case BODY:
        case FALSE:
        case INTERVAL:
        case LOOP:
        case MOD:
        case NEW:
        case NULL:
        case OPERATOR:
        case PRIVATE:
        case RAW:
        case SELECT:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case SYSDATE:
        case TRUE:
        case TYPE:
        case INT:
        case STRING:
        case OLD:
        case IDENTIFIER:
        case UNSIGNED_NUMERIC_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_15;
        }
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECLARE:
      jj_consume_token(DECLARE);
      declarativeSection(false);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(BEGIN);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 11:
      case 20:
      case 21:
      case REPLACE:
      case BEGIN:
      case BODY:
      case CLOSE:
      case COMMIT:
      case DECLARE:
      case DELETE:
      case EXECUTE:
      case EXIT:
      case FALSE:
      case FETCH:
      case FOR:
      case FORALL:
      case GOTO:
      case IF:
      case INSERT:
      case INTERVAL:
      case LOCK:
      case LOOP:
      case MERGE:
      case MOD:
      case NEW:
      case NOT:
      case NULL:
      case OPEN:
      case OPERATOR:
      case PRIVATE:
      case RAISE:
      case RAW:
      case RETURN:
      case ROLLBACK:
      case SAVEPOINT:
      case SELECT:
      case SET:
      case SQL:
      case SQLCODE:
      case SQLERRM:
      case SYSDATE:
      case TRUE:
      case TYPE:
      case WHILE:
      case UPDATE:
      case INT:
      case STRING:
      case OLD:
      case IDENTIFIER:
      case UNSIGNED_NUMERIC_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_16;
      }
      statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCEPTION:
      exceptionHandler();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPLACE:
    case DEFINER:
    case CURRENT_USER:
    case SERIALLY_REUSABLE:
    case RESTRICT_REFERENCES:
    case EXCEPTION_INIT:
    case AUTONOMOUS_TRANSACTION:
    case LANGUAGE:
    case ALL:
    case ALTER:
    case AND:
    case ANY:
    case ARRAY:
    case AS:
    case ASC:
    case AT:
    case AUTHID:
    case AVG:
    case BETWEEN:
    case BINARY_INTEGER:
    case BODY:
    case BOOLEAN:
    case BULK:
    case BY:
    case CASE:
    case CHAR:
    case CHAR_BASE:
    case CHECK:
    case CLOSE:
    case CLUSTER:
    case COALESCE:
    case COLLECT:
    case COMMENT:
    case COMMIT:
    case COMPRESS:
    case CONNECT:
    case CONSTANT:
    case CREATE:
    case CURRENT:
    case CURRVAL:
    case CURSOR:
    case DATE:
    case DAY:
    case DECLARE:
    case DECIMAL:
    case _DEFAULT:
    case DELETE:
    case DESC:
    case DISTINCT:
    case DO:
    case DROP:
    case ELSE:
    case ELSIF:
    case EXCEPTION:
    case EXCLUSIVE:
    case EXECUTE:
    case EXISTS:
    case EXIT:
    case EXTENDS:
    case EXTRACT:
    case FALSE:
    case FETCH:
    case FLOAT:
    case FOR:
    case FORALL:
    case FROM:
    case GOTO:
    case GROUP:
    case HAVING:
    case HEAP:
    case HOUR:
    case IF:
    case IMMEDIATE:
    case IN:
    case INDEX:
    case INDICATOR:
    case INSERT:
    case INTEGER:
    case INTERFACE:
    case INTERSECT:
    case INTERVAL:
    case INTO:
    case IS:
    case ISOLATION:
    case JAVA:
    case LEVEL:
    case LIKE:
    case LIMITED:
    case LOCK:
    case LONG:
    case LOOP:
    case MAX:
    case MIN:
    case MINUS:
    case MINUTE:
    case MLSLABEL:
    case MOD:
    case MODE:
    case MONTH:
    case NATURAL:
    case NATURALN:
    case NEW:
    case NEXTVAL:
    case NOCOPY:
    case NOT:
    case NOWAIT:
    case NULL:
    case NULLIF:
    case NUMBER:
    case NUMBER_BASE:
    case OCIROWID:
    case OF:
    case ON:
    case OPAQUE:
    case OPEN:
    case OPERATOR:
    case OPTION:
    case OR:
    case ORDER:
    case ORGANIZATION:
    case OTHERS:
    case OUT:
    case PACKAGE:
    case PARTITION:
    case PCTFREE:
    case PLS_INTEGER:
    case POSITIVE:
    case POSITIVEN:
    case PRIOR:
    case PRIVATE:
    case PUBLIC:
    case RAISE:
    case RANGE:
    case RAW:
    case REAL:
    case RECORD:
    case REF:
    case RELEASE:
    case RETURN:
    case REVERSE:
    case ROLLBACK:
    case ROW:
    case ROWID:
    case ROWNUM:
    case ROWTYPE:
    case SAVEPOINT:
    case SECOND:
    case SELECT:
    case SEPARATE:
    case SET:
    case SHARE:
    case SMALLINT:
    case SPACE:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case START:
    case STDDEV:
    case SUBTYPE:
    case SUCCESSFUL:
    case SUM:
    case SYNONYM:
    case SYSDATE:
    case TABLE:
    case THEN:
    case TIME:
    case TIMESTAMP:
    case TIMEZONE_REGION:
    case TIMEZONE_ABBR:
    case TIMEZONE_MINUTE:
    case TIMEZONE_HOUR:
    case TO:
    case TRIGGER:
    case TRUE:
    case TYPE:
    case UI:
    case WHILE:
    case UPDATE:
    case VARCHAR:
    case VARCHAR2:
    case DOUBLE:
    case DEC:
    case PRECISION:
    case INT:
    case NUMERIC:
    case SIGNTYPE:
    case NCHAR:
    case NVARCHAR2:
    case STRING:
    case UROWID:
    case VARRAY:
    case VARYING:
    case BFILE:
    case BLOB:
    case CLOB:
    case NCLOB:
    case YEAR:
    case LOCAL:
    case WITH:
    case ZONE:
    case CHARACTER:
    case OLD:
    case PARENT:
    case IDENTIFIER:
      ID();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(5);
                if (m_out != null)
                {
                        m_out.endElement(purifyIdentifier(node.toString().toUpperCase()));
                }
  }

  final public String datatype() throws ParseException {
  String name;
    if (jj_2_20(2)) {
      name = scalar_datatype_name();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPLACE:
      case BODY:
      case INTERVAL:
      case LOOP:
      case MOD:
      case NEW:
      case OPERATOR:
      case PRIVATE:
      case RAW:
      case REF:
      case SQL:
      case SQLCODE:
      case SQLERRM:
      case SYSDATE:
      case TYPE:
      case INT:
      case STRING:
      case OLD:
      case IDENTIFIER:
        if (jj_2_19(2)) {
          jj_consume_token(REF);
        } else {
          ;
        }
        name = qualifiedName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 9:
          jj_consume_token(9);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TYPE:
            jj_consume_token(TYPE);
                                                                                 name += "%TYPE";
            break;
          case ROWTYPE:
            jj_consume_token(ROWTYPE);
                                                                                                             name += "%ROWTYPE";
            break;
          default:
            jj_la1[65] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String scalar_datatype_name() throws ParseException {
  Token size=null, precision=null;
        String name = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINARY_INTEGER:
      jj_consume_token(BINARY_INTEGER);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      jj_consume_token(PRECISION);
                                                                     name = "DOUBLE PRECISION";
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    case NATURALN:
      jj_consume_token(NATURALN);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
      break;
    case PLS_INTEGER:
      jj_consume_token(PLS_INTEGER);
      break;
    case POSITIVE:
      jj_consume_token(POSITIVE);
      break;
    case POSITIVEN:
      jj_consume_token(POSITIVEN);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case SIGNTYPE:
      jj_consume_token(SIGNTYPE);
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    default:
      jj_la1[68] = jj_gen;
      if (jj_2_21(2)) {
        jj_consume_token(LONG);
      } else if (jj_2_22(2)) {
        jj_consume_token(LONG);
        jj_consume_token(RAW);
                                                                                name = "LONG RAW";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NCHAR:
          jj_consume_token(NCHAR);
          break;
        case NVARCHAR2:
          jj_consume_token(NVARCHAR2);
          break;
        case RAW:
          jj_consume_token(RAW);
          break;
        case ROWID:
          jj_consume_token(ROWID);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case UROWID:
          jj_consume_token(UROWID);
          break;
        case VARCHAR:
          jj_consume_token(VARCHAR);
          break;
        case VARCHAR2:
          jj_consume_token(VARCHAR2);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        case TABLE:
          jj_consume_token(TABLE);
          break;
        case VARRAY:
          jj_consume_token(VARRAY);
          break;
        case VARYING:
          jj_consume_token(VARYING);
          jj_consume_token(ARRAY);
                                                name = "VARYING ARRAY";
          break;
        case BFILE:
          jj_consume_token(BFILE);
          break;
        case BLOB:
          jj_consume_token(BLOB);
          break;
        case CLOB:
          jj_consume_token(CLOB);
          break;
        case NCLOB:
          jj_consume_token(NCLOB);
          break;
        case REF:
          jj_consume_token(REF);
          jj_consume_token(CURSOR);
                        name = "REF CURSOR";
          break;
        case DATE:
          jj_consume_token(DATE);
          break;
        default:
          jj_la1[69] = jj_gen;
          if (jj_2_23(2)) {
            jj_consume_token(INTERVAL);
            jj_consume_token(DAY);
            jj_consume_token(TO);
            jj_consume_token(SECOND);
                                               name = "INTERVAL DAY TO SECOND";
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTERVAL:
              jj_consume_token(INTERVAL);
              jj_consume_token(YEAR);
              jj_consume_token(TO);
              jj_consume_token(MONTH);
                                  name = "INTERVAL YEAR TO MONTH";
              break;
            default:
              jj_la1[70] = jj_gen;
              if (jj_2_24(3)) {
                jj_consume_token(TIMESTAMP);
                jj_consume_token(WITH);
                jj_consume_token(LOCAL);
                jj_consume_token(TIME);
                jj_consume_token(ZONE);
                                                            name = "TIMESTAMP WITH LOCAL TIME ZONE";
              } else if (jj_2_25(2)) {
                jj_consume_token(TIMESTAMP);
                jj_consume_token(WITH);
                jj_consume_token(TIME);
                jj_consume_token(ZONE);
                                                    name = "TIMESTAMP WITH TIME ZONE";
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case TIMESTAMP:
                  jj_consume_token(TIMESTAMP);
                  break;
                default:
                  jj_la1[71] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
      if (name == null) {
        name = token.toString();
      }
    if (jj_2_26(2)) {
      jj_consume_token(3);
      size = numericLiteral();
                                                 name += "(" + size;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        precision = numericLiteral();
                                                 name += "," + precision;
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      jj_consume_token(4);
             name += ")";
    } else {
      ;
    }
          {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void exceptionHandler() throws ParseException, org.xml.sax.SAXException {
    jj_consume_token(EXCEPTION);
    label_17:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(WHEN);
      qualifiedName();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_18;
        }
        jj_consume_token(OR);
        qualifiedName();
      }
      jj_consume_token(THEN);
      label_19:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case 11:
        case 20:
        case 21:
        case REPLACE:
        case BEGIN:
        case BODY:
        case CLOSE:
        case COMMIT:
        case DECLARE:
        case DELETE:
        case EXECUTE:
        case EXIT:
        case FALSE:
        case FETCH:
        case FOR:
        case FORALL:
        case GOTO:
        case IF:
        case INSERT:
        case INTERVAL:
        case LOCK:
        case LOOP:
        case MERGE:
        case MOD:
        case NEW:
        case NOT:
        case NULL:
        case OPEN:
        case OPERATOR:
        case PRIVATE:
        case RAISE:
        case RAW:
        case RETURN:
        case ROLLBACK:
        case SAVEPOINT:
        case SELECT:
        case SET:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case SYSDATE:
        case TRUE:
        case TYPE:
        case WHILE:
        case UPDATE:
        case INT:
        case STRING:
        case OLD:
        case IDENTIFIER:
        case UNSIGNED_NUMERIC_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_19;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHEN:
      jj_consume_token(WHEN);
      jj_consume_token(OTHERS);
      jj_consume_token(THEN);
      label_20:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
        case 11:
        case 20:
        case 21:
        case REPLACE:
        case BEGIN:
        case BODY:
        case CLOSE:
        case COMMIT:
        case DECLARE:
        case DELETE:
        case EXECUTE:
        case EXIT:
        case FALSE:
        case FETCH:
        case FOR:
        case FORALL:
        case GOTO:
        case IF:
        case INSERT:
        case INTERVAL:
        case LOCK:
        case LOOP:
        case MERGE:
        case MOD:
        case NEW:
        case NOT:
        case NULL:
        case OPEN:
        case OPERATOR:
        case PRIVATE:
        case RAISE:
        case RAW:
        case RETURN:
        case ROLLBACK:
        case SAVEPOINT:
        case SELECT:
        case SET:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case SYSDATE:
        case TRUE:
        case TYPE:
        case WHILE:
        case UPDATE:
        case INT:
        case STRING:
        case OLD:
        case IDENTIFIER:
        case UNSIGNED_NUMERIC_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_20;
        }
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
  }

  final public void skip2NextTerminator(String initiator,String terminator) throws ParseException {
  Token t = getToken(1);
  int count = (initiator == null) ? 0 : 1;
  if(t.image.equals(initiator)) count++;
  while (count > 0 || !t.image.equals(terminator))
  {
    t = getNextToken();
    t = getToken(1);
          if(t.image.equals(initiator)) count++;
          if(t.image.equals(terminator)) count--;
  }
          {if (true) return;}
  }

/**
 * 2006-05-24 - Matthias Hendler - added MERGE
 */
  final public void sqlStatement(String initiator, String terminator) throws ParseException, SAXException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      jj_consume_token(SELECT);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    case INSERT:
      jj_consume_token(INSERT);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case COMMIT:
      jj_consume_token(COMMIT);
      break;
    case ROLLBACK:
      jj_consume_token(ROLLBACK);
      break;
    case SAVEPOINT:
      jj_consume_token(SAVEPOINT);
      break;
    case EXECUTE:
      jj_consume_token(EXECUTE);
      break;
    case SET:
      jj_consume_token(SET);
      jj_consume_token(TRANSACTION);
      break;
    case LOCK:
      jj_consume_token(LOCK);
      jj_consume_token(TABLE);
      break;
    case MERGE:
      jj_consume_token(MERGE);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    skip2NextTerminator(initiator,terminator);
  }

// ============================================================================
// S T A T E M E N T S
// ============================================================================

/**
 * 2006-05-24 - Matthias Hendler - added MERGE, EXECUTE choice and LOOKAHEAD at <LOOP>
 */
  final public void statement() throws ParseException, SAXException {
    if (jj_2_28(2147483647)) {
      sqlStatement(null,";");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 5:
        jj_consume_token(5);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        Expression();
        jj_consume_token(THEN);
        label_21:
        while (true) {
          statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 3:
          case 11:
          case 20:
          case 21:
          case REPLACE:
          case BEGIN:
          case BODY:
          case CLOSE:
          case COMMIT:
          case DECLARE:
          case DELETE:
          case EXECUTE:
          case EXIT:
          case FALSE:
          case FETCH:
          case FOR:
          case FORALL:
          case GOTO:
          case IF:
          case INSERT:
          case INTERVAL:
          case LOCK:
          case LOOP:
          case MERGE:
          case MOD:
          case NEW:
          case NOT:
          case NULL:
          case OPEN:
          case OPERATOR:
          case PRIVATE:
          case RAISE:
          case RAW:
          case RETURN:
          case ROLLBACK:
          case SAVEPOINT:
          case SELECT:
          case SET:
          case SQL:
          case SQLCODE:
          case SQLERRM:
          case SYSDATE:
          case TRUE:
          case TYPE:
          case WHILE:
          case UPDATE:
          case INT:
          case STRING:
          case OLD:
          case IDENTIFIER:
          case UNSIGNED_NUMERIC_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            break label_21;
          }
        }
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSIF:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_22;
          }
          jj_consume_token(ELSIF);
          Expression();
          jj_consume_token(THEN);
          label_23:
          while (true) {
            statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 11:
            case 20:
            case 21:
            case REPLACE:
            case BEGIN:
            case BODY:
            case CLOSE:
            case COMMIT:
            case DECLARE:
            case DELETE:
            case EXECUTE:
            case EXIT:
            case FALSE:
            case FETCH:
            case FOR:
            case FORALL:
            case GOTO:
            case IF:
            case INSERT:
            case INTERVAL:
            case LOCK:
            case LOOP:
            case MERGE:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPEN:
            case OPERATOR:
            case PRIVATE:
            case RAISE:
            case RAW:
            case RETURN:
            case ROLLBACK:
            case SAVEPOINT:
            case SELECT:
            case SET:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case WHILE:
            case UPDATE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              ;
              break;
            default:
              jj_la1[81] = jj_gen;
              break label_23;
            }
          }
        }
        label_24:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            ;
            break;
          default:
            jj_la1[82] = jj_gen;
            break label_24;
          }
          jj_consume_token(ELSE);
          label_25:
          while (true) {
            statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 11:
            case 20:
            case 21:
            case REPLACE:
            case BEGIN:
            case BODY:
            case CLOSE:
            case COMMIT:
            case DECLARE:
            case DELETE:
            case EXECUTE:
            case EXIT:
            case FALSE:
            case FETCH:
            case FOR:
            case FORALL:
            case GOTO:
            case IF:
            case INSERT:
            case INTERVAL:
            case LOCK:
            case LOOP:
            case MERGE:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPEN:
            case OPERATOR:
            case PRIVATE:
            case RAISE:
            case RAW:
            case RETURN:
            case ROLLBACK:
            case SAVEPOINT:
            case SELECT:
            case SET:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case WHILE:
            case UPDATE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              ;
              break;
            default:
              jj_la1[83] = jj_gen;
              break label_25;
            }
          }
        }
        jj_consume_token(END);
        jj_consume_token(IF);
        jj_consume_token(5);
        break;
      case FOR:
        jj_consume_token(FOR);
        ID();
        jj_consume_token(IN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REVERSE:
          jj_consume_token(REVERSE);
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
          jj_consume_token(10);
          Expression();
          break;
        default:
          jj_la1[85] = jj_gen;
          ;
        }
        jj_consume_token(LOOP);
        label_26:
        while (true) {
          statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 3:
          case 11:
          case 20:
          case 21:
          case REPLACE:
          case BEGIN:
          case BODY:
          case CLOSE:
          case COMMIT:
          case DECLARE:
          case DELETE:
          case EXECUTE:
          case EXIT:
          case FALSE:
          case FETCH:
          case FOR:
          case FORALL:
          case GOTO:
          case IF:
          case INSERT:
          case INTERVAL:
          case LOCK:
          case LOOP:
          case MERGE:
          case MOD:
          case NEW:
          case NOT:
          case NULL:
          case OPEN:
          case OPERATOR:
          case PRIVATE:
          case RAISE:
          case RAW:
          case RETURN:
          case ROLLBACK:
          case SAVEPOINT:
          case SELECT:
          case SET:
          case SQL:
          case SQLCODE:
          case SQLERRM:
          case SYSDATE:
          case TRUE:
          case TYPE:
          case WHILE:
          case UPDATE:
          case INT:
          case STRING:
          case OLD:
          case IDENTIFIER:
          case UNSIGNED_NUMERIC_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_26;
          }
        }
        jj_consume_token(END);
        jj_consume_token(LOOP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        jj_consume_token(5);
        break;
      case FORALL:
        jj_consume_token(FORALL);
        ID();
        jj_consume_token(IN);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
          jj_consume_token(10);
          Expression();
          break;
        default:
          jj_la1[88] = jj_gen;
          ;
        }
        sqlStatement(null,";");
        jj_consume_token(5);
        break;
      default:
        jj_la1[109] = jj_gen;
        if (jj_2_29(2)) {
          jj_consume_token(LOOP);
          label_27:
          while (true) {
            statement();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 11:
            case 20:
            case 21:
            case REPLACE:
            case BEGIN:
            case BODY:
            case CLOSE:
            case COMMIT:
            case DECLARE:
            case DELETE:
            case EXECUTE:
            case EXIT:
            case FALSE:
            case FETCH:
            case FOR:
            case FORALL:
            case GOTO:
            case IF:
            case INSERT:
            case INTERVAL:
            case LOCK:
            case LOOP:
            case MERGE:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPEN:
            case OPERATOR:
            case PRIVATE:
            case RAISE:
            case RAW:
            case RETURN:
            case ROLLBACK:
            case SAVEPOINT:
            case SELECT:
            case SET:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case WHILE:
            case UPDATE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              ;
              break;
            default:
              jj_la1[89] = jj_gen;
              break label_27;
            }
          }
          jj_consume_token(END);
          jj_consume_token(LOOP);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          default:
            jj_la1[90] = jj_gen;
            ;
          }
          jj_consume_token(5);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WHILE:
            jj_consume_token(WHILE);
            Expression();
            jj_consume_token(LOOP);
            label_28:
            while (true) {
              statement();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 3:
              case 11:
              case 20:
              case 21:
              case REPLACE:
              case BEGIN:
              case BODY:
              case CLOSE:
              case COMMIT:
              case DECLARE:
              case DELETE:
              case EXECUTE:
              case EXIT:
              case FALSE:
              case FETCH:
              case FOR:
              case FORALL:
              case GOTO:
              case IF:
              case INSERT:
              case INTERVAL:
              case LOCK:
              case LOOP:
              case MERGE:
              case MOD:
              case NEW:
              case NOT:
              case NULL:
              case OPEN:
              case OPERATOR:
              case PRIVATE:
              case RAISE:
              case RAW:
              case RETURN:
              case ROLLBACK:
              case SAVEPOINT:
              case SELECT:
              case SET:
              case SQL:
              case SQLCODE:
              case SQLERRM:
              case SYSDATE:
              case TRUE:
              case TYPE:
              case WHILE:
              case UPDATE:
              case INT:
              case STRING:
              case OLD:
              case IDENTIFIER:
              case UNSIGNED_NUMERIC_LITERAL:
              case CHARACTER_LITERAL:
              case STRING_LITERAL:
                ;
                break;
              default:
                jj_la1[91] = jj_gen;
                break label_28;
              }
            }
            jj_consume_token(END);
            jj_consume_token(LOOP);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              jj_consume_token(IDENTIFIER);
              break;
            default:
              jj_la1[92] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case GOTO:
            jj_consume_token(GOTO);
            qualifiedName();
            jj_consume_token(5);
            break;
          case RETURN:
            jj_consume_token(RETURN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 20:
            case 21:
            case REPLACE:
            case BODY:
            case FALSE:
            case INTERVAL:
            case LOOP:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPERATOR:
            case PRIVATE:
            case RAW:
            case SELECT:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              Expression();
              break;
            default:
              jj_la1[93] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case EXIT:
            jj_consume_token(EXIT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WHEN:
            case IDENTIFIER:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case WHEN:
                jj_consume_token(WHEN);
                Expression();
                break;
              case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case WHEN:
                  jj_consume_token(WHEN);
                  Expression();
                  break;
                default:
                  jj_la1[94] = jj_gen;
                  ;
                }
                break;
              default:
                jj_la1[95] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[96] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case RAISE:
            jj_consume_token(RAISE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case REPLACE:
            case BODY:
            case INTERVAL:
            case LOOP:
            case MOD:
            case NEW:
            case OPERATOR:
            case PRIVATE:
            case RAW:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TYPE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
              qualifiedName();
              break;
            default:
              jj_la1[97] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case CLOSE:
            jj_consume_token(CLOSE);
            qualifiedName();
            jj_consume_token(5);
            break;
          case OPEN:
            jj_consume_token(OPEN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 3:
            case 20:
            case 21:
            case REPLACE:
            case BODY:
            case FALSE:
            case INTERVAL:
            case LOOP:
            case MOD:
            case NEW:
            case NOT:
            case NULL:
            case OPERATOR:
            case PRIVATE:
            case RAW:
            case SELECT:
            case SQL:
            case SQLCODE:
            case SQLERRM:
            case SYSDATE:
            case TRUE:
            case TYPE:
            case INT:
            case STRING:
            case OLD:
            case IDENTIFIER:
            case UNSIGNED_NUMERIC_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
              Expression();
              break;
            default:
              jj_la1[98] = jj_gen;
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FOR:
              jj_consume_token(FOR);
              Expression();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case USING:
                jj_consume_token(USING);
                Expression();
                label_29:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 7:
                    ;
                    break;
                  default:
                    jj_la1[99] = jj_gen;
                    break label_29;
                  }
                  jj_consume_token(7);
                  Expression();
                }
                break;
              default:
                jj_la1[100] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[101] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case FETCH:
            jj_consume_token(FETCH);
            qualifiedName();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BULK:
              jj_consume_token(BULK);
              jj_consume_token(COLLECT);
              break;
            default:
              jj_la1[102] = jj_gen;
              ;
            }
            jj_consume_token(INTO);
            Expression();
            label_30:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 7:
                ;
                break;
              default:
                jj_la1[103] = jj_gen;
                break label_30;
              }
              jj_consume_token(7);
              Expression();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIMIT:
              jj_consume_token(LIMIT);
              Expression();
              break;
            default:
              jj_la1[104] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case 11:
            jj_consume_token(11);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(12);
            statement();
            break;
          case BEGIN:
          case DECLARE:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DECLARE:
              jj_consume_token(DECLARE);
              declarativeSection(false);
              break;
            default:
              jj_la1[105] = jj_gen;
              ;
            }
            jj_consume_token(BEGIN);
            label_31:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 3:
              case 11:
              case 20:
              case 21:
              case REPLACE:
              case BEGIN:
              case BODY:
              case CLOSE:
              case COMMIT:
              case DECLARE:
              case DELETE:
              case EXECUTE:
              case EXIT:
              case FALSE:
              case FETCH:
              case FOR:
              case FORALL:
              case GOTO:
              case IF:
              case INSERT:
              case INTERVAL:
              case LOCK:
              case LOOP:
              case MERGE:
              case MOD:
              case NEW:
              case NOT:
              case NULL:
              case OPEN:
              case OPERATOR:
              case PRIVATE:
              case RAISE:
              case RAW:
              case RETURN:
              case ROLLBACK:
              case SAVEPOINT:
              case SELECT:
              case SET:
              case SQL:
              case SQLCODE:
              case SQLERRM:
              case SYSDATE:
              case TRUE:
              case TYPE:
              case WHILE:
              case UPDATE:
              case INT:
              case STRING:
              case OLD:
              case IDENTIFIER:
              case UNSIGNED_NUMERIC_LITERAL:
              case CHARACTER_LITERAL:
              case STRING_LITERAL:
                ;
                break;
              default:
                jj_la1[106] = jj_gen;
                break label_31;
              }
              statement();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EXCEPTION:
              exceptionHandler();
              break;
            default:
              jj_la1[107] = jj_gen;
              ;
            }
            jj_consume_token(END);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              jj_consume_token(IDENTIFIER);
              break;
            default:
              jj_la1[108] = jj_gen;
              ;
            }
            jj_consume_token(5);
            break;
          case 3:
          case 20:
          case 21:
          case REPLACE:
          case BODY:
          case FALSE:
          case INTERVAL:
          case LOOP:
          case MOD:
          case NEW:
          case NOT:
          case NULL:
          case OPERATOR:
          case PRIVATE:
          case RAW:
          case SELECT:
          case SQL:
          case SQLCODE:
          case SQLERRM:
          case SYSDATE:
          case TRUE:
          case TYPE:
          case INT:
          case STRING:
          case OLD:
          case IDENTIFIER:
          case UNSIGNED_NUMERIC_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Expression();
            jj_consume_token(5);
            break;
          case EXECUTE:
            jj_consume_token(EXECUTE);
            jj_consume_token(IMMEDIATE);
            jj_consume_token(STRING_LITERAL);
            jj_consume_token(5);
            break;
          default:
            jj_la1[110] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void subtype_definition(boolean isPackageLevel) throws ParseException, SAXException {
        Token start, subtype_name=null, constraint=null, element_type=null;
        Token collection = null, collection2 = null;
        String baseType = null, returnType = null, indexBy = null;
        Hashtable tags = null;
        int lastField = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBTYPE:
      start = jj_consume_token(SUBTYPE);
      subtype_name = jj_consume_token(IDENTIFIER);
                                // element generated only on the package level
                                if (m_out != null && isPackageLevel) {
                                        tags = processMemberComment(start, "TYPE", subtype_name.toString());
                                }
      jj_consume_token(IS);
      baseType = datatype();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        jj_consume_token(3);
        constraint = jj_consume_token(IDENTIFIER);
        jj_consume_token(4);
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(NULL);
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
                                returnType = baseType;
                                if (constraint != null) {
                                        returnType += "(" + constraint + ")";
                                }
      break;
    case TYPE:
      start = jj_consume_token(TYPE);
      subtype_name = jj_consume_token(IDENTIFIER);
                                // element generated only on the package level
                                if (m_out != null && isPackageLevel) {
                                        tags = processMemberComment(start, "TYPE", subtype_name.toString());
                                }
      jj_consume_token(IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECORD:
        jj_consume_token(RECORD);
                                           baseType = "RECORD";
        jj_consume_token(3);
        fieldDeclaration(isPackageLevel, tags);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 7:
            ;
            break;
          default:
            jj_la1[113] = jj_gen;
            break label_32;
          }
          jj_consume_token(7);
          fieldDeclaration(isPackageLevel, tags);
        }
        jj_consume_token(4);
                                        returnType = "RECORD";
                                        // end for

        break;
      case TABLE:
      case VARRAY:
      case VARYING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TABLE:
          collection = jj_consume_token(TABLE);
          break;
        case VARRAY:
          collection = jj_consume_token(VARRAY);
          break;
        case VARYING:
          collection = jj_consume_token(VARYING);
          collection2 = jj_consume_token(ARRAY);
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
          jj_consume_token(3);
          constraint = numericLiteral();
          jj_consume_token(4);
          break;
        default:
          jj_la1[115] = jj_gen;
          ;
        }
        jj_consume_token(OF);
        baseType = datatype();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          jj_consume_token(NULL);
          break;
        default:
          jj_la1[116] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INDEX:
          jj_consume_token(INDEX);
          jj_consume_token(BY);
          indexBy = datatype();
          break;
        default:
          jj_la1[117] = jj_gen;
          ;
        }
                                        returnType = collection.toString();
                                        if (collection2 != null) {
                                                returnType += " " + collection2;
                                        }
                                        if (constraint != null) {
                                                returnType += "(" + constraint + ")";
                                        }
                                        returnType += " OF " + baseType + " INDEX BY " + indexBy;
        break;
      case REF:
        jj_consume_token(REF);
        jj_consume_token(CURSOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          jj_consume_token(RETURN);
          baseType = datatype();
          break;
        default:
          jj_la1[118] = jj_gen;
          ;
        }
                                        returnType = "REF CURSOR";
                                        if (baseType != null) {
                                                returnType += " RETURN " + baseType;
                                        }
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(5);
                // element generated only at the package level
                if (m_out != null && isPackageLevel)
                {
                        if (returnType != null)
                        {
                                m_out.pushAttribute("TYPE", returnType);
                                m_out.element("RETURN");
                        }
                        m_out.endElement("TYPE");
                }
  }

  final public void fieldDeclaration(boolean isPackageLevel, Hashtable tags) throws ParseException, SAXException {
        Token name;
        String dataType;
    name = ID();
    dataType = datatype();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case _DEFAULT:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(NULL);
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        jj_consume_token(8);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
                if (m_out != null && isPackageLevel)
                {
                        String paramName = name.toString();
                        String paramComment = getParamComment(paramName, tags);
                        m_out.pushAttribute("NAME", purifyIdentifier(paramName));
                        m_out.pushAttribute("TYPE", purifyIdentifier(dataType));
                        m_out.startElement("FIELD");
                        if (paramComment != null) {
                                m_out.startElement("COMMENT");
                                m_out.cdata(paramComment);
                                m_out.endElement("COMMENT");
                        }
                        m_out.endElement("FIELD");
                }
  }

  final public void collection_type_definition() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void collectionDeclaration(boolean isPackageLevel) throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void objectDeclaration() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

/** Java stored procedure, external function*/
  final public void callSpecTail(boolean isPackageLevel) throws ParseException {
    jj_consume_token(LANGUAGE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case JAVA:
      jj_consume_token(JAVA);
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(STRING_LITERAL);
  }

/** Cursor (common part of specification and body) */
  final public void cursorUnit(boolean isPackageLevel) throws ParseException, SAXException {
        Token start, name;
        String type;
        Hashtable tags = new Hashtable();
    start = jj_consume_token(CURSOR);
    name = ID();
                // element generated only on the package level
                if (m_out != null && isPackageLevel) {
                        tags = processMemberComment(start, start.toString().toUpperCase(), name.toString());
                } else {
                        tags = new Hashtable();
                }
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        ;
        break;
      default:
        jj_la1[125] = jj_gen;
        break label_33;
      }
      jj_consume_token(3);
      parameterDeclaration(tags,isPackageLevel);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_34;
        }
        jj_consume_token(7);
        parameterDeclaration(tags,isPackageLevel);
      }
      jj_consume_token(4);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      type = datatype();
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        String returnComment = null;
                        Collection tagValues = (Collection) tags.get("@return");
                        if (tagValues != null)
                        {
                                Iterator it = tagValues.iterator();
                                while (it.hasNext())
                                        returnComment = (String) it.next();
                        }
                        m_out.pushAttribute("TYPE", purifyIdentifier(type.toString()));
                        m_out.startElement("RETURN");
                        if (returnComment != null)
                        {
                                m_out.startElement("COMMENT");
                                m_out.cdata(returnComment);
                                m_out.endElement("COMMENT");
                        }
                        m_out.endElement("RETURN");
                }
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
                // element generated only on the package level
                if (m_out != null && isPackageLevel) {
                        m_out.endElement(purifyIdentifier(start.toString().toUpperCase()));
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
          ;
          break;
        default:
          jj_la1[128] = jj_gen;
          break label_35;
        }
        jj_consume_token(3);
      }
      sqlStatement(null,";");
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    jj_consume_token(5);
  }

  final public void cursorSpec(boolean isPackageLevel) throws ParseException, SAXException {
    cursorUnit(isPackageLevel);
  }

  final public void cursorBody(boolean isPackageLevel) throws ParseException, SAXException {
    cursorUnit(isPackageLevel);
  }

// ============================================================================
// E X P R E S S I O N S
// ============================================================================

/*
String expression() :
{}
{
	"test"
	{ return ""; }
}
*/
  final public String Expression() throws ParseException {
    if (jj_2_30(2147483647)) {
      Assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
      case 20:
      case 21:
      case REPLACE:
      case BODY:
      case FALSE:
      case INTERVAL:
      case LOOP:
      case MOD:
      case NEW:
      case NOT:
      case NULL:
      case OPERATOR:
      case PRIVATE:
      case RAW:
      case SELECT:
      case SQL:
      case SQLCODE:
      case SQLERRM:
      case SYSDATE:
      case TRUE:
      case TYPE:
      case INT:
      case STRING:
      case OLD:
      case IDENTIFIER:
      case UNSIGNED_NUMERIC_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ConditionalOrExpression();
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public void Assignment() throws ParseException {
    PrimaryExpression();
    jj_consume_token(8);
    Expression();
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[131] = jj_gen;
        break label_36;
      }
      jj_consume_token(OR);
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_37;
      }
      jj_consume_token(AND);
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 14:
      case 15:
      case IS:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        break;
      case 14:
        jj_consume_token(14);
        break;
      case 15:
        jj_consume_token(15);
        break;
      case IS:
        jj_consume_token(IS);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      RelationalExpression();
    }
  }

/**
 * 2006-05-23 - Matthias Hendler - added FROM
 */
  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
      case 17:
      case 18:
      case 19:
      case BETWEEN:
      case FROM:
      case IN:
      case LIKE:
      case NOT:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        break;
      case 17:
        jj_consume_token(17);
        break;
      case 18:
        jj_consume_token(18);
        break;
      case 19:
        jj_consume_token(19);
        break;
      case BETWEEN:
      case FROM:
      case IN:
      case LIKE:
      case NOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        default:
          jj_la1[136] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          jj_consume_token(IN);
          break;
        case BETWEEN:
          jj_consume_token(BETWEEN);
          break;
        case LIKE:
          jj_consume_token(LIKE);
          break;
        case FROM:
          jj_consume_token(FROM);
          break;
        default:
          jj_la1[137] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case 21:
      case 22:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_40;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        break;
      case 21:
        jj_consume_token(21);
        break;
      case 22:
        jj_consume_token(22);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 23:
      case MOD:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_41;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        break;
      case 1:
        jj_consume_token(1);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
    case 21:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        break;
      case 21:
        jj_consume_token(21);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case 3:
    case REPLACE:
    case BODY:
    case FALSE:
    case INTERVAL:
    case LOOP:
    case MOD:
    case NEW:
    case NOT:
    case NULL:
    case OPERATOR:
    case PRIVATE:
    case RAW:
    case SELECT:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case SYSDATE:
    case TRUE:
    case TYPE:
    case INT:
    case STRING:
    case OLD:
    case IDENTIFIER:
    case UNSIGNED_NUMERIC_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[144] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      UnaryExpression();
      break;
    case 3:
    case REPLACE:
    case BODY:
    case FALSE:
    case INTERVAL:
    case LOOP:
    case MOD:
    case NEW:
    case NULL:
    case OPERATOR:
    case PRIVATE:
    case RAW:
    case SELECT:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case SYSDATE:
    case TRUE:
    case TYPE:
    case INT:
    case STRING:
    case OLD:
    case IDENTIFIER:
    case UNSIGNED_NUMERIC_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      PrimaryExpression();
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * 2006-05-23 - Matthias Hendler - Added lookahead otherwise warning encountered.
 *                                 Warning arised while adding methode triggerUnit(). 
 */
  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_42:
    while (true) {
      if (jj_2_31(2)) {
        ;
      } else {
        break label_42;
      }
      PrimarySuffix();
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case UNSIGNED_NUMERIC_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case REPLACE:
    case BODY:
    case INTERVAL:
    case LOOP:
    case MOD:
    case NEW:
    case OPERATOR:
    case PRIVATE:
    case RAW:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case SYSDATE:
    case TYPE:
    case INT:
    case STRING:
    case OLD:
    case IDENTIFIER:
      Name();
      break;
    default:
      jj_la1[147] = jj_gen;
      if (jj_2_32(2147483647)) {
        jj_consume_token(SELECT);
        skip2NextTerminator(null,";");
      } else if (jj_2_33(2147483647)) {
        jj_consume_token(3);
        skip2NextTerminator("(",")");
        jj_consume_token(4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
          jj_consume_token(3);
          Expression();
          label_43:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 7:
              ;
              break;
            default:
              jj_la1[146] = jj_gen;
              break label_43;
            }
            jj_consume_token(7);
            Expression();
          }
          jj_consume_token(4);
          break;
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      qualifiedID();
      break;
    case 3:
      Arguments();
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED_NUMERIC_LITERAL:
      numericLiteral();
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

/** Recognizes a numeric literal.
* This may look like token, but it isn't. Not atomic enough.
* E.g. "+1" would be valid literal, which make parsing of "i+1" impossible
* (here, we have tokens "i", "+" and "1")
*/
  final public Token numericLiteral() throws ParseException {
  Token main = null;
    main = jj_consume_token(UNSIGNED_NUMERIC_LITERAL);
          {if (true) return main;}
    throw new Error("Missing return statement in function");
  }

  final public void Name() throws ParseException {
    unqualifiedID();
    label_44:
    while (true) {
      if (jj_2_34(2)) {
        ;
      } else {
        break label_44;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        break;
      case 9:
        jj_consume_token(9);
        break;
      default:
        jj_la1[152] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      qualifiedID();
    }
  }

  final public String qualifiedName() throws ParseException {
        Token token = null;
        StringBuffer sb = new StringBuffer();
    token = unqualifiedID();
                                 sb.append(token);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_45;
      }
      jj_consume_token(2);
      token = qualifiedID();
                                      sb.append("."); sb.append(token);
    }
          {if (true) return(sb.toString());}
    throw new Error("Missing return statement in function");
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
    case 20:
    case 21:
    case REPLACE:
    case BODY:
    case FALSE:
    case INTERVAL:
    case LOOP:
    case MOD:
    case NEW:
    case NOT:
    case NULL:
    case OPERATOR:
    case PRIVATE:
    case RAW:
    case SELECT:
    case SQL:
    case SQLCODE:
    case SQLERRM:
    case SYSDATE:
    case TRUE:
    case TYPE:
    case INT:
    case STRING:
    case OLD:
    case IDENTIFIER:
    case UNSIGNED_NUMERIC_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      ArgumentList();
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    jj_consume_token(4);
  }

  final public void ArgumentList() throws ParseException {
    Argument();
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[155] = jj_gen;
        break label_46;
      }
      jj_consume_token(7);
      Argument();
    }
  }

  final public void Argument() throws ParseException {
    if (jj_2_35(2)) {
      unqualifiedID();
      jj_consume_token(24);
    } else {
      ;
    }
    Expression();
  }

// ============================================================================
// D E C L A R A T I O N S
// ============================================================================
  final public void variableOrConstantDeclaration(boolean isPackageLevel) throws ParseException, org.xml.sax.SAXException {
  Token name=null;
        String type;
        Hashtable tags = null;
        String elementName = "VARIABLE";
    name = ID();
    if (jj_2_36(2)) {
      jj_consume_token(CONSTANT);
                                            elementName = "CONSTANT";
    } else {
      ;
    }
    type = datatype();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case NULL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
      jj_consume_token(NULL);
      break;
    default:
      jj_la1[157] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
    case _DEFAULT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        jj_consume_token(8);
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expression();
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    jj_consume_token(5);
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        tags = processMemberComment(name, elementName, name.toString());
                        m_out.pushAttribute("TYPE", purifyIdentifier(type));
                        m_out.startElement("RETURN");
                        m_out.endElement("RETURN");
                        m_out.endElement(elementName);
                }
  }

  final public void datatypeDeclaration() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void pragma(boolean isPackageLevel) throws ParseException, org.xml.sax.SAXException {
  Token start,name,functionName,exceptionName,errorNumber; Hashtable tags = null;
    start = jj_consume_token(PRAGMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SERIALLY_REUSABLE:
      name = jj_consume_token(SERIALLY_REUSABLE);
      break;
    case AUTONOMOUS_TRANSACTION:
      name = jj_consume_token(AUTONOMOUS_TRANSACTION);
      break;
    case RESTRICT_REFERENCES:
      name = jj_consume_token(RESTRICT_REFERENCES);
      jj_consume_token(3);
      functionName = ID();
      label_47:
      while (true) {
        jj_consume_token(7);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REPLACE:
        case DEFINER:
        case CURRENT_USER:
        case SERIALLY_REUSABLE:
        case RESTRICT_REFERENCES:
        case EXCEPTION_INIT:
        case AUTONOMOUS_TRANSACTION:
        case LANGUAGE:
        case ALL:
        case ALTER:
        case AND:
        case ANY:
        case ARRAY:
        case AS:
        case ASC:
        case AT:
        case AUTHID:
        case AVG:
        case BETWEEN:
        case BINARY_INTEGER:
        case BODY:
        case BOOLEAN:
        case BULK:
        case BY:
        case CASE:
        case CHAR:
        case CHAR_BASE:
        case CHECK:
        case CLOSE:
        case CLUSTER:
        case COALESCE:
        case COLLECT:
        case COMMENT:
        case COMMIT:
        case COMPRESS:
        case CONNECT:
        case CONSTANT:
        case CREATE:
        case CURRENT:
        case CURRVAL:
        case CURSOR:
        case DATE:
        case DAY:
        case DECLARE:
        case DECIMAL:
        case _DEFAULT:
        case DELETE:
        case DESC:
        case DISTINCT:
        case DO:
        case DROP:
        case ELSE:
        case ELSIF:
        case EXCEPTION:
        case EXCLUSIVE:
        case EXECUTE:
        case EXISTS:
        case EXIT:
        case EXTENDS:
        case EXTRACT:
        case FALSE:
        case FETCH:
        case FLOAT:
        case FOR:
        case FORALL:
        case FROM:
        case GOTO:
        case GROUP:
        case HAVING:
        case HEAP:
        case HOUR:
        case IF:
        case IMMEDIATE:
        case IN:
        case INDEX:
        case INDICATOR:
        case INSERT:
        case INTEGER:
        case INTERFACE:
        case INTERSECT:
        case INTERVAL:
        case INTO:
        case IS:
        case ISOLATION:
        case JAVA:
        case LEVEL:
        case LIKE:
        case LIMITED:
        case LOCK:
        case LONG:
        case LOOP:
        case MAX:
        case MIN:
        case MINUS:
        case MINUTE:
        case MLSLABEL:
        case MOD:
        case MODE:
        case MONTH:
        case NATURAL:
        case NATURALN:
        case NEW:
        case NEXTVAL:
        case NOCOPY:
        case NOT:
        case NOWAIT:
        case NULL:
        case NULLIF:
        case NUMBER:
        case NUMBER_BASE:
        case OCIROWID:
        case OF:
        case ON:
        case OPAQUE:
        case OPEN:
        case OPERATOR:
        case OPTION:
        case OR:
        case ORDER:
        case ORGANIZATION:
        case OTHERS:
        case OUT:
        case PACKAGE:
        case PARTITION:
        case PCTFREE:
        case PLS_INTEGER:
        case POSITIVE:
        case POSITIVEN:
        case PRIOR:
        case PRIVATE:
        case PUBLIC:
        case RAISE:
        case RANGE:
        case RAW:
        case REAL:
        case RECORD:
        case REF:
        case RELEASE:
        case RETURN:
        case REVERSE:
        case ROLLBACK:
        case ROW:
        case ROWID:
        case ROWNUM:
        case ROWTYPE:
        case SAVEPOINT:
        case SECOND:
        case SELECT:
        case SEPARATE:
        case SET:
        case SHARE:
        case SMALLINT:
        case SPACE:
        case SQL:
        case SQLCODE:
        case SQLERRM:
        case START:
        case STDDEV:
        case SUBTYPE:
        case SUCCESSFUL:
        case SUM:
        case SYNONYM:
        case SYSDATE:
        case TABLE:
        case THEN:
        case TIME:
        case TIMESTAMP:
        case TIMEZONE_REGION:
        case TIMEZONE_ABBR:
        case TIMEZONE_MINUTE:
        case TIMEZONE_HOUR:
        case TO:
        case TRIGGER:
        case TRUE:
        case TYPE:
        case UI:
        case WHILE:
        case UPDATE:
        case VARCHAR:
        case VARCHAR2:
        case DOUBLE:
        case DEC:
        case PRECISION:
        case INT:
        case NUMERIC:
        case SIGNTYPE:
        case NCHAR:
        case NVARCHAR2:
        case STRING:
        case UROWID:
        case VARRAY:
        case VARYING:
        case BFILE:
        case BLOB:
        case CLOB:
        case NCLOB:
        case YEAR:
        case LOCAL:
        case WITH:
        case ZONE:
        case CHARACTER:
        case OLD:
        case PARENT:
        case IDENTIFIER:
          ID();
          break;
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        default:
          jj_la1[160] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 7:
          ;
          break;
        default:
          jj_la1[161] = jj_gen;
          break label_47;
        }
      }
      jj_consume_token(4);
      break;
    case EXCEPTION_INIT:
      name = jj_consume_token(EXCEPTION_INIT);
      jj_consume_token(3);
      exceptionName = jj_consume_token(IDENTIFIER);
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case 21:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 20:
          jj_consume_token(20);
          break;
        case 21:
          jj_consume_token(21);
          break;
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
      errorNumber = numericLiteral();
      jj_consume_token(4);
      break;
    case INTERFACE:
      name = jj_consume_token(INTERFACE);
      jj_consume_token(3);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(7);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(7);
      numericLiteral();
      jj_consume_token(4);
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(5);
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        tags = processMemberComment(start, start.toString().toUpperCase(), name.toString());
                        m_out.endElement("PRAGMA");
                }
  }

  final public void exceptionDeclaration(boolean isPackageLevel) throws ParseException, org.xml.sax.SAXException {
  Token exception_name; Hashtable tags = null;
    exception_name = jj_consume_token(IDENTIFIER);
    jj_consume_token(EXCEPTION);
    jj_consume_token(5);
                // element generated only on the package level
                if (m_out != null && isPackageLevel)
                {
                        tags = processMemberComment(exception_name, "EXCEPTION", exception_name.toString());
                        m_out.endElement("EXCEPTION");
                }
  }

/**
 * 2006-05-20 - Matthias Hendler - added <OLD> and <PARENT>  
 */
  final public Token ID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      break;
    case DEFINER:
      jj_consume_token(DEFINER);
      break;
    case CURRENT_USER:
      jj_consume_token(CURRENT_USER);
      break;
    case SERIALLY_REUSABLE:
      jj_consume_token(SERIALLY_REUSABLE);
      break;
    case RESTRICT_REFERENCES:
      jj_consume_token(RESTRICT_REFERENCES);
      break;
    case EXCEPTION_INIT:
      jj_consume_token(EXCEPTION_INIT);
      break;
    case AUTONOMOUS_TRANSACTION:
      jj_consume_token(AUTONOMOUS_TRANSACTION);
      break;
    case LANGUAGE:
      jj_consume_token(LANGUAGE);
      break;
    case ALL:
      jj_consume_token(ALL);
      break;
    case ALTER:
      jj_consume_token(ALTER);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      break;
    case AS:
      jj_consume_token(AS);
      break;
    case ASC:
      jj_consume_token(ASC);
      break;
    case AT:
      jj_consume_token(AT);
      break;
    case AUTHID:
      jj_consume_token(AUTHID);
      break;
    case AVG:
      jj_consume_token(AVG);
      break;
    case BETWEEN:
      jj_consume_token(BETWEEN);
      break;
    case BINARY_INTEGER:
      jj_consume_token(BINARY_INTEGER);
      break;
    case BODY:
      jj_consume_token(BODY);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case BULK:
      jj_consume_token(BULK);
      break;
    case BY:
      jj_consume_token(BY);
      break;
    case CASE:
      jj_consume_token(CASE);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CHAR_BASE:
      jj_consume_token(CHAR_BASE);
      break;
    case CHECK:
      jj_consume_token(CHECK);
      break;
    case CLOSE:
      jj_consume_token(CLOSE);
      break;
    case CLUSTER:
      jj_consume_token(CLUSTER);
      break;
    case COALESCE:
      jj_consume_token(COALESCE);
      break;
    case COLLECT:
      jj_consume_token(COLLECT);
      break;
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    case COMMIT:
      jj_consume_token(COMMIT);
      break;
    case COMPRESS:
      jj_consume_token(COMPRESS);
      break;
    case CONNECT:
      jj_consume_token(CONNECT);
      break;
    case CONSTANT:
      jj_consume_token(CONSTANT);
      break;
    case CREATE:
      jj_consume_token(CREATE);
      break;
    case CURRENT:
      jj_consume_token(CURRENT);
      break;
    case CURRVAL:
      jj_consume_token(CURRVAL);
      break;
    case CURSOR:
      jj_consume_token(CURSOR);
      break;
    case DATE:
      jj_consume_token(DATE);
      break;
    case DAY:
      jj_consume_token(DAY);
      break;
    case DECLARE:
      jj_consume_token(DECLARE);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case DESC:
      jj_consume_token(DESC);
      break;
    case DISTINCT:
      jj_consume_token(DISTINCT);
      break;
    case DO:
      jj_consume_token(DO);
      break;
    case DROP:
      jj_consume_token(DROP);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case ELSIF:
      jj_consume_token(ELSIF);
      break;
    case EXCEPTION:
      jj_consume_token(EXCEPTION);
      break;
    case EXCLUSIVE:
      jj_consume_token(EXCLUSIVE);
      break;
    case EXECUTE:
      jj_consume_token(EXECUTE);
      break;
    case EXISTS:
      jj_consume_token(EXISTS);
      break;
    case EXIT:
      jj_consume_token(EXIT);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      break;
    case EXTRACT:
      jj_consume_token(EXTRACT);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case FETCH:
      jj_consume_token(FETCH);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case FOR:
      jj_consume_token(FOR);
      break;
    case FORALL:
      jj_consume_token(FORALL);
      break;
    case FROM:
      jj_consume_token(FROM);
      break;
    case GOTO:
      jj_consume_token(GOTO);
      break;
    case GROUP:
      jj_consume_token(GROUP);
      break;
    case HAVING:
      jj_consume_token(HAVING);
      break;
    case HEAP:
      jj_consume_token(HEAP);
      break;
    case HOUR:
      jj_consume_token(HOUR);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case IMMEDIATE:
      jj_consume_token(IMMEDIATE);
      break;
    case IN:
      jj_consume_token(IN);
      break;
    case INDEX:
      jj_consume_token(INDEX);
      break;
    case INDICATOR:
      jj_consume_token(INDICATOR);
      break;
    case INSERT:
      jj_consume_token(INSERT);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      break;
    case INTERVAL:
      jj_consume_token(INTERVAL);
      break;
    case INTO:
      jj_consume_token(INTO);
      break;
    case IS:
      jj_consume_token(IS);
      break;
    case ISOLATION:
      jj_consume_token(ISOLATION);
      break;
    case JAVA:
      jj_consume_token(JAVA);
      break;
    case LEVEL:
      jj_consume_token(LEVEL);
      break;
    case LIKE:
      jj_consume_token(LIKE);
      break;
    case LIMITED:
      jj_consume_token(LIMITED);
      break;
    case LOCK:
      jj_consume_token(LOCK);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case LOOP:
      jj_consume_token(LOOP);
      break;
    case MAX:
      jj_consume_token(MAX);
      break;
    case MIN:
      jj_consume_token(MIN);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case MINUTE:
      jj_consume_token(MINUTE);
      break;
    case MLSLABEL:
      jj_consume_token(MLSLABEL);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case MODE:
      jj_consume_token(MODE);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    case NATURALN:
      jj_consume_token(NATURALN);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case NEXTVAL:
      jj_consume_token(NEXTVAL);
      break;
    case NOCOPY:
      jj_consume_token(NOCOPY);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    case NOWAIT:
      jj_consume_token(NOWAIT);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    case NULLIF:
      jj_consume_token(NULLIF);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case NUMBER_BASE:
      jj_consume_token(NUMBER_BASE);
      break;
    case OCIROWID:
      jj_consume_token(OCIROWID);
      break;
    case OF:
      jj_consume_token(OF);
      break;
    case ON:
      jj_consume_token(ON);
      break;
    case OPAQUE:
      jj_consume_token(OPAQUE);
      break;
    case OPEN:
      jj_consume_token(OPEN);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      break;
    case OPTION:
      jj_consume_token(OPTION);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case ORDER:
      jj_consume_token(ORDER);
      break;
    case ORGANIZATION:
      jj_consume_token(ORGANIZATION);
      break;
    case OTHERS:
      jj_consume_token(OTHERS);
      break;
    case OUT:
      jj_consume_token(OUT);
      break;
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    case PARTITION:
      jj_consume_token(PARTITION);
      break;
    case PCTFREE:
      jj_consume_token(PCTFREE);
      break;
    case PLS_INTEGER:
      jj_consume_token(PLS_INTEGER);
      break;
    case POSITIVE:
      jj_consume_token(POSITIVE);
      break;
    case POSITIVEN:
      jj_consume_token(POSITIVEN);
      break;
    case PRIOR:
      jj_consume_token(PRIOR);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case RAISE:
      jj_consume_token(RAISE);
      break;
    case RANGE:
      jj_consume_token(RANGE);
      break;
    case RAW:
      jj_consume_token(RAW);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case RECORD:
      jj_consume_token(RECORD);
      break;
    case REF:
      jj_consume_token(REF);
      break;
    case RELEASE:
      jj_consume_token(RELEASE);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case REVERSE:
      jj_consume_token(REVERSE);
      break;
    case ROLLBACK:
      jj_consume_token(ROLLBACK);
      break;
    case ROW:
      jj_consume_token(ROW);
      break;
    case ROWID:
      jj_consume_token(ROWID);
      break;
    case ROWNUM:
      jj_consume_token(ROWNUM);
      break;
    case ROWTYPE:
      jj_consume_token(ROWTYPE);
      break;
    case SAVEPOINT:
      jj_consume_token(SAVEPOINT);
      break;
    case SECOND:
      jj_consume_token(SECOND);
      break;
    case SELECT:
      jj_consume_token(SELECT);
      break;
    case SEPARATE:
      jj_consume_token(SEPARATE);
      break;
    case SET:
      jj_consume_token(SET);
      break;
    case SHARE:
      jj_consume_token(SHARE);
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
      break;
    case SPACE:
      jj_consume_token(SPACE);
      break;
    case SQL:
      jj_consume_token(SQL);
      break;
    case SQLCODE:
      jj_consume_token(SQLCODE);
      break;
    case SQLERRM:
      jj_consume_token(SQLERRM);
      break;
    case START:
      jj_consume_token(START);
      break;
    case STDDEV:
      jj_consume_token(STDDEV);
      break;
    case SUBTYPE:
      jj_consume_token(SUBTYPE);
      break;
    case SUCCESSFUL:
      jj_consume_token(SUCCESSFUL);
      break;
    case SUM:
      jj_consume_token(SUM);
      break;
    case SYNONYM:
      jj_consume_token(SYNONYM);
      break;
    case SYSDATE:
      jj_consume_token(SYSDATE);
      break;
    case TABLE:
      jj_consume_token(TABLE);
      break;
    case THEN:
      jj_consume_token(THEN);
      break;
    case TIME:
      jj_consume_token(TIME);
      break;
    case TIMESTAMP:
      jj_consume_token(TIMESTAMP);
      break;
    case TIMEZONE_REGION:
      jj_consume_token(TIMEZONE_REGION);
      break;
    case TIMEZONE_ABBR:
      jj_consume_token(TIMEZONE_ABBR);
      break;
    case TIMEZONE_MINUTE:
      jj_consume_token(TIMEZONE_MINUTE);
      break;
    case TIMEZONE_HOUR:
      jj_consume_token(TIMEZONE_HOUR);
      break;
    case TO:
      jj_consume_token(TO);
      break;
    case TRIGGER:
      jj_consume_token(TRIGGER);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case UI:
      jj_consume_token(UI);
      break;
    case UPDATE:
      jj_consume_token(UPDATE);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      break;
    case VARCHAR2:
      jj_consume_token(VARCHAR2);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case PRECISION:
      jj_consume_token(PRECISION);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
      break;
    case SIGNTYPE:
      jj_consume_token(SIGNTYPE);
      break;
    case NCHAR:
      jj_consume_token(NCHAR);
      break;
    case NVARCHAR2:
      jj_consume_token(NVARCHAR2);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case UROWID:
      jj_consume_token(UROWID);
      break;
    case VARRAY:
      jj_consume_token(VARRAY);
      break;
    case VARYING:
      jj_consume_token(VARYING);
      break;
    case BFILE:
      jj_consume_token(BFILE);
      break;
    case BLOB:
      jj_consume_token(BLOB);
      break;
    case CLOB:
      jj_consume_token(CLOB);
      break;
    case NCLOB:
      jj_consume_token(NCLOB);
      break;
    case YEAR:
      jj_consume_token(YEAR);
      break;
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case WITH:
      jj_consume_token(WITH);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case ZONE:
      jj_consume_token(ZONE);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case OLD:
      jj_consume_token(OLD);
      break;
    case PARENT:
      jj_consume_token(PARENT);
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

/**
 * 2006-05-20 - Matthias Hendler - added <OLD>, <NEW>, <LOOP>, <INT>
 */
  final public Token unqualifiedID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case BODY:
      jj_consume_token(BODY);
      break;
    case INTERVAL:
      jj_consume_token(INTERVAL);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case RAW:
      jj_consume_token(RAW);
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case SQL:
      jj_consume_token(SQL);
      break;
    case SQLCODE:
      jj_consume_token(SQLCODE);
      break;
    case SQLERRM:
      jj_consume_token(SQLERRM);
      break;
    case SYSDATE:
      jj_consume_token(SYSDATE);
      break;
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case OLD:
      jj_consume_token(OLD);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case LOOP:
      jj_consume_token(LOOP);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

/**
 * 2006-05-20 - Matthias Hendler - added <LIMIT>
 */
  final public Token qualifiedID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      break;
    case DEFINER:
      jj_consume_token(DEFINER);
      break;
    case CURRENT_USER:
      jj_consume_token(CURRENT_USER);
      break;
    case SERIALLY_REUSABLE:
      jj_consume_token(SERIALLY_REUSABLE);
      break;
    case RESTRICT_REFERENCES:
      jj_consume_token(RESTRICT_REFERENCES);
      break;
    case EXCEPTION_INIT:
      jj_consume_token(EXCEPTION_INIT);
      break;
    case AUTONOMOUS_TRANSACTION:
      jj_consume_token(AUTONOMOUS_TRANSACTION);
      break;
    case LANGUAGE:
      jj_consume_token(LANGUAGE);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      break;
    case AUTHID:
      jj_consume_token(AUTHID);
      break;
    case AVG:
      jj_consume_token(AVG);
      break;
    case BINARY_INTEGER:
      jj_consume_token(BINARY_INTEGER);
      break;
    case BODY:
      jj_consume_token(BODY);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case BULK:
      jj_consume_token(BULK);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CHAR_BASE:
      jj_consume_token(CHAR_BASE);
      break;
    case CLOSE:
      jj_consume_token(CLOSE);
      break;
    case COALESCE:
      jj_consume_token(COALESCE);
      break;
    case COLLECT:
      jj_consume_token(COLLECT);
      break;
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    case COMMIT:
      jj_consume_token(COMMIT);
      break;
    case CONSTANT:
      jj_consume_token(CONSTANT);
      break;
    case CURRVAL:
      jj_consume_token(CURRVAL);
      break;
    case CURSOR:
      jj_consume_token(CURSOR);
      break;
    case DATE:
      jj_consume_token(DATE);
      break;
    case DAY:
      jj_consume_token(DAY);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case DO:
      jj_consume_token(DO);
      break;
    case ELSIF:
      jj_consume_token(ELSIF);
      break;
    case EXECUTE:
      jj_consume_token(EXECUTE);
      break;
    case EXISTS:
      jj_consume_token(EXISTS);
      break;
    case EXIT:
      jj_consume_token(EXIT);
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      break;
    case EXTRACT:
      jj_consume_token(EXTRACT);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case FORALL:
      jj_consume_token(FORALL);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case HEAP:
      jj_consume_token(HEAP);
      break;
    case HOUR:
      jj_consume_token(HOUR);
      break;
    case IMMEDIATE:
      jj_consume_token(IMMEDIATE);
      break;
    case INDICATOR:
      jj_consume_token(INDICATOR);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      break;
    case INTERVAL:
      jj_consume_token(INTERVAL);
      break;
    case ISOLATION:
      jj_consume_token(ISOLATION);
      break;
    case JAVA:
      jj_consume_token(JAVA);
      break;
    case LEVEL:
      jj_consume_token(LEVEL);
      break;
    case LIMITED:
      jj_consume_token(LIMITED);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case LOOP:
      jj_consume_token(LOOP);
      break;
    case MAX:
      jj_consume_token(MAX);
      break;
    case MIN:
      jj_consume_token(MIN);
      break;
    case MINUTE:
      jj_consume_token(MINUTE);
      break;
    case MLSLABEL:
      jj_consume_token(MLSLABEL);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    case NATURALN:
      jj_consume_token(NATURALN);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case NEXTVAL:
      jj_consume_token(NEXTVAL);
      break;
    case NOCOPY:
      jj_consume_token(NOCOPY);
      break;
    case NULLIF:
      jj_consume_token(NULLIF);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case NUMBER_BASE:
      jj_consume_token(NUMBER_BASE);
      break;
    case OCIROWID:
      jj_consume_token(OCIROWID);
      break;
    case OPAQUE:
      jj_consume_token(OPAQUE);
      break;
    case OPEN:
      jj_consume_token(OPEN);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      break;
    case ORGANIZATION:
      jj_consume_token(ORGANIZATION);
      break;
    case OTHERS:
      jj_consume_token(OTHERS);
      break;
    case OUT:
      jj_consume_token(OUT);
      break;
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    case PARTITION:
      jj_consume_token(PARTITION);
      break;
    case PLS_INTEGER:
      jj_consume_token(PLS_INTEGER);
      break;
    case POSITIVE:
      jj_consume_token(POSITIVE);
      break;
    case POSITIVEN:
      jj_consume_token(POSITIVEN);
      break;
    case PRAGMA:
      jj_consume_token(PRAGMA);
      break;
    case PRIOR:
      jj_consume_token(PRIOR);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case RAISE:
      jj_consume_token(RAISE);
      break;
    case RANGE:
      jj_consume_token(RANGE);
      break;
    case RAW:
      jj_consume_token(RAW);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case RECORD:
      jj_consume_token(RECORD);
      break;
    case REF:
      jj_consume_token(REF);
      break;
    case RELEASE:
      jj_consume_token(RELEASE);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case REVERSE:
      jj_consume_token(REVERSE);
      break;
    case ROLLBACK:
      jj_consume_token(ROLLBACK);
      break;
    case ROW:
      jj_consume_token(ROW);
      break;
    case ROWID:
      jj_consume_token(ROWID);
      break;
    case ROWNUM:
      jj_consume_token(ROWNUM);
      break;
    case ROWTYPE:
      jj_consume_token(ROWTYPE);
      break;
    case SAVEPOINT:
      jj_consume_token(SAVEPOINT);
      break;
    case SECOND:
      jj_consume_token(SECOND);
      break;
    case SEPARATE:
      jj_consume_token(SEPARATE);
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
      break;
    case SPACE:
      jj_consume_token(SPACE);
      break;
    case SQLCODE:
      jj_consume_token(SQLCODE);
      break;
    case SQLERRM:
      jj_consume_token(SQLERRM);
      break;
    case STDDEV:
      jj_consume_token(STDDEV);
      break;
    case SUBTYPE:
      jj_consume_token(SUBTYPE);
      break;
    case SUCCESSFUL:
      jj_consume_token(SUCCESSFUL);
      break;
    case SUM:
      jj_consume_token(SUM);
      break;
    case SYNONYM:
      jj_consume_token(SYNONYM);
      break;
    case SYSDATE:
      jj_consume_token(SYSDATE);
      break;
    case TIME:
      jj_consume_token(TIME);
      break;
    case TIMESTAMP:
      jj_consume_token(TIMESTAMP);
      break;
    case TIMEZONE_REGION:
      jj_consume_token(TIMEZONE_REGION);
      break;
    case TIMEZONE_ABBR:
      jj_consume_token(TIMEZONE_ABBR);
      break;
    case TIMEZONE_MINUTE:
      jj_consume_token(TIMEZONE_MINUTE);
      break;
    case TIMEZONE_HOUR:
      jj_consume_token(TIMEZONE_HOUR);
      break;
    case TRIGGER:
      jj_consume_token(TRIGGER);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case UI:
      jj_consume_token(UI);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      break;
    case VARCHAR2:
      jj_consume_token(VARCHAR2);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case PRECISION:
      jj_consume_token(PRECISION);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
      break;
    case SIGNTYPE:
      jj_consume_token(SIGNTYPE);
      break;
    case NCHAR:
      jj_consume_token(NCHAR);
      break;
    case NVARCHAR2:
      jj_consume_token(NVARCHAR2);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case UROWID:
      jj_consume_token(UROWID);
      break;
    case VARRAY:
      jj_consume_token(VARRAY);
      break;
    case VARYING:
      jj_consume_token(VARYING);
      break;
    case BFILE:
      jj_consume_token(BFILE);
      break;
    case BLOB:
      jj_consume_token(BLOB);
      break;
    case CLOB:
      jj_consume_token(CLOB);
      break;
    case NCLOB:
      jj_consume_token(NCLOB);
      break;
    case YEAR:
      jj_consume_token(YEAR);
      break;
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case ZONE:
      jj_consume_token(ZONE);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case LIMIT:
      jj_consume_token(LIMIT);
      break;
    default:
      jj_la1[167] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token typeKeyword() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case DATE:
      jj_consume_token(DATE);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case SMALLINT:
      jj_consume_token(SMALLINT);
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
      break;
    case NUMERIC:
      jj_consume_token(NUMERIC);
      break;
    case DEC:
      jj_consume_token(DEC);
      break;
    case BINARY_INTEGER:
      jj_consume_token(BINARY_INTEGER);
      break;
    case NATURAL:
      jj_consume_token(NATURAL);
      break;
    case NATURALN:
      jj_consume_token(NATURALN);
      break;
    case POSITIVE:
      jj_consume_token(POSITIVE);
      break;
    case POSITIVEN:
      jj_consume_token(POSITIVEN);
      break;
    case SIGNTYPE:
      jj_consume_token(SIGNTYPE);
      break;
    case VARCHAR2:
      jj_consume_token(VARCHAR2);
      break;
    case VARCHAR:
      jj_consume_token(VARCHAR);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case RAW:
      jj_consume_token(RAW);
      break;
    case ROWID:
      jj_consume_token(ROWID);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case MLSLABEL:
      jj_consume_token(MLSLABEL);
      break;
    case BLOB:
      jj_consume_token(BLOB);
      break;
    case CLOB:
      jj_consume_token(CLOB);
      break;
    case BFILE:
      jj_consume_token(BFILE);
      break;
    case NCHAR:
      jj_consume_token(NCHAR);
      break;
    case NVARCHAR2:
      jj_consume_token(NVARCHAR2);
      break;
    case NCLOB:
      jj_consume_token(NCLOB);
      break;
    case PLS_INTEGER:
      jj_consume_token(PLS_INTEGER);
      break;
    case TIME:
      jj_consume_token(TIME);
      break;
    case TIMESTAMP:
      jj_consume_token(TIMESTAMP);
      break;
    case UROWID:
      jj_consume_token(UROWID);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      break;
    case AUTHID:
      jj_consume_token(AUTHID);
      break;
    case CHAR_BASE:
      jj_consume_token(CHAR_BASE);
      break;
    case CURRVAL:
      jj_consume_token(CURRVAL);
      break;
    case HOUR:
      jj_consume_token(HOUR);
      break;
    case INTERVAL:
      jj_consume_token(INTERVAL);
      break;
    case MONTH:
      jj_consume_token(MONTH);
      break;
    case NUMBER_BASE:
      jj_consume_token(NUMBER_BASE);
      break;
    case OCIROWID:
      jj_consume_token(OCIROWID);
      break;
    case RECORD:
      jj_consume_token(RECORD);
      break;
    case REF:
      jj_consume_token(REF);
      break;
    case ROW:
      jj_consume_token(ROW);
      break;
    case ROWNUM:
      jj_consume_token(ROWNUM);
      break;
    case ROWTYPE:
      jj_consume_token(ROWTYPE);
      break;
    case SECOND:
      jj_consume_token(SECOND);
      break;
    case SET:
      jj_consume_token(SET);
      break;
    case TABLE:
      jj_consume_token(TABLE);
      break;
    case TIMEZONE_REGION:
      jj_consume_token(TIMEZONE_REGION);
      break;
    case TIMEZONE_ABBR:
      jj_consume_token(TIMEZONE_ABBR);
      break;
    case TIMEZONE_MINUTE:
      jj_consume_token(TIMEZONE_MINUTE);
      break;
    case TIMEZONE_HOUR:
      jj_consume_token(TIMEZONE_HOUR);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case PRECISION:
      jj_consume_token(PRECISION);
      break;
    case VARRAY:
      jj_consume_token(VARRAY);
      break;
    case YEAR:
      jj_consume_token(YEAR);
      break;
    case LOCAL:
      jj_consume_token(LOCAL);
      break;
    case WITH:
      jj_consume_token(WITH);
      break;
    case ZONE:
      jj_consume_token(ZONE);
      break;
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return token;}
    throw new Error("Missing return statement in function");
  }

/**
 * Tests, if the new Token if type ID is identical to the old Token of type ID.
 * 
 * 2006-05-18 - Matthias Hendler - added: Just for understanding javacc and not used,
 *                                        cause to many closing ENDs (IDENTIFIER) were mistyped.
 */
  final public Token equalsOldIDNewID(Token pOldID) throws ParseException {
        Token newID;
    newID = ID();
                if (pOldID.image.equals(newID.image)) {
                        {if (true) return newID;}
                } else {
                        {if (true) throw new ParseException("PLSQL syntax error on line "+newID.beginLine+" at column "+newID.beginColumn+"!\n"
                                + "Found \""+newID.image+"\" but expected \""+pOldID.image+"\".");}
                }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EXCEPTION)) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(7)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(EXCEPTION_INIT)) return true;
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(7)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(7)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_scan_token(274)) return true;
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(RESTRICT_REFERENCES)) return true;
    if (jj_scan_token(3)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    if (jj_3R_166()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(PRAGMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    }
    }
    }
    }
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_162()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(3)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(UNSIGNED_NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(222)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    Token xsp;
    if (jj_scan_token(3)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(3)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_scan_token(273)) {
    jj_scanpos = xsp;
    if (jj_scan_token(274)) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(2)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_142()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    }
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  final private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    }
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_69()) return true;
    if (jj_scan_token(8)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(3)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(CURSOR)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(LANGUAGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(VARYING)) return true;
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_53()) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(LOCK)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(REF)) return true;
    if (jj_scan_token(CURSOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    if (jj_scan_token(OF)) return true;
    if (jj_3R_87()) return true;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(TRANSACTION)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(3)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(RECORD)) return true;
    if (jj_scan_token(3)) return true;
    if (jj_3R_177()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(LOCK)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(TRANSACTION)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(SUBTYPE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IS)) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(USING)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(BULK)) return true;
    if (jj_scan_token(COLLECT)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(IMMEDIATE)) return true;
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_108()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(DECLARE)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(BEGIN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(12)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(FETCH)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_108()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_213()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(OPEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(CLOSE)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(RAISE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(EXIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    if (jj_3R_224()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(ELSIF)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    if (jj_3R_223()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) jj_scanpos = xsp;
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(228)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    if (jj_3R_206()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(LOOP)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    if (jj_3R_68()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(LOOP)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(187)) jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(LOOP)) return true;
    if (jj_3R_204()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(LOOP)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_108()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    if (jj_3R_200()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(ROWTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(195)) {
    jj_scanpos = xsp;
    if (jj_scan_token(228)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_scan_token(OTHERS)) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    if (jj_3R_219()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_218()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(LONG)) return true;
    if (jj_scan_token(RAW)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(9)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(EXCEPTION)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_scan_token(PRECISION)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(VARYING)) return true;
    if (jj_scan_token(ARRAY)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(TIMESTAMP)) return true;
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(TIME)) return true;
    if (jj_scan_token(ZONE)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(TIMESTAMP)) return true;
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LOCAL)) return true;
    if (jj_scan_token(TIME)) return true;
    if (jj_scan_token(ZONE)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(INTERVAL)) return true;
    if (jj_scan_token(YEAR)) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(INTERVAL)) return true;
    if (jj_scan_token(DAY)) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_scan_token(SECOND)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(REF)) return true;
    if (jj_scan_token(CURSOR)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(REF)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(232)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(235)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(236)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_scan_token(237)) {
    jj_scanpos = xsp;
    if (jj_scan_token(238)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(240)) {
    jj_scanpos = xsp;
    if (jj_scan_token(229)) {
    jj_scanpos = xsp;
    if (jj_scan_token(230)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_scan_token(243)) {
    jj_scanpos = xsp;
    if (jj_scan_token(244)) {
    jj_scanpos = xsp;
    if (jj_scan_token(245)) {
    jj_scanpos = xsp;
    if (jj_scan_token(246)) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_scan_token(214)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(NOCOPY)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(OUT)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(OUT)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(7)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(REPLACE)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(3)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(167)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(REPLACE)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_scan_token(BODY)) return true;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    if (jj_3R_75()) return true;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_53()) return true;
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(REPLACE)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(AUTHID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(PACKAGE)) return true;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    if (jj_3R_75()) return true;
    if (jj_scan_token(END)) return true;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(DECLARE)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_scan_token(187)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(194)) {
    jj_scanpos = xsp;
    if (jj_scan_token(196)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(200)) {
    jj_scanpos = xsp;
    if (jj_scan_token(202)) {
    jj_scanpos = xsp;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(205)) {
    jj_scanpos = xsp;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_scan_token(207)) {
    jj_scanpos = xsp;
    if (jj_scan_token(208)) {
    jj_scanpos = xsp;
    if (jj_scan_token(209)) {
    jj_scanpos = xsp;
    if (jj_scan_token(210)) {
    jj_scanpos = xsp;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(214)) {
    jj_scanpos = xsp;
    if (jj_scan_token(215)) {
    jj_scanpos = xsp;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(221)) {
    jj_scanpos = xsp;
    if (jj_scan_token(222)) {
    jj_scanpos = xsp;
    if (jj_scan_token(223)) {
    jj_scanpos = xsp;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_scan_token(229)) {
    jj_scanpos = xsp;
    if (jj_scan_token(230)) {
    jj_scanpos = xsp;
    if (jj_scan_token(231)) {
    jj_scanpos = xsp;
    if (jj_scan_token(232)) {
    jj_scanpos = xsp;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) {
    jj_scanpos = xsp;
    if (jj_scan_token(235)) {
    jj_scanpos = xsp;
    if (jj_scan_token(236)) {
    jj_scanpos = xsp;
    if (jj_scan_token(237)) {
    jj_scanpos = xsp;
    if (jj_scan_token(238)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(240)) {
    jj_scanpos = xsp;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_scan_token(242)) {
    jj_scanpos = xsp;
    if (jj_scan_token(243)) {
    jj_scanpos = xsp;
    if (jj_scan_token(244)) {
    jj_scanpos = xsp;
    if (jj_scan_token(245)) {
    jj_scanpos = xsp;
    if (jj_scan_token(246)) {
    jj_scanpos = xsp;
    if (jj_scan_token(247)) {
    jj_scanpos = xsp;
    if (jj_scan_token(248)) {
    jj_scanpos = xsp;
    if (jj_scan_token(227)) {
    jj_scanpos = xsp;
    if (jj_scan_token(250)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(201)) {
    jj_scanpos = xsp;
    if (jj_scan_token(202)) {
    jj_scanpos = xsp;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(210)) {
    jj_scanpos = xsp;
    if (jj_scan_token(223)) {
    jj_scanpos = xsp;
    if (jj_scan_token(257)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(274)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(268)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_scan_token(187)) {
    jj_scanpos = xsp;
    if (jj_scan_token(188)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(191)) {
    jj_scanpos = xsp;
    if (jj_scan_token(192)) {
    jj_scanpos = xsp;
    if (jj_scan_token(193)) {
    jj_scanpos = xsp;
    if (jj_scan_token(194)) {
    jj_scanpos = xsp;
    if (jj_scan_token(195)) {
    jj_scanpos = xsp;
    if (jj_scan_token(196)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(198)) {
    jj_scanpos = xsp;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(200)) {
    jj_scanpos = xsp;
    if (jj_scan_token(201)) {
    jj_scanpos = xsp;
    if (jj_scan_token(202)) {
    jj_scanpos = xsp;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(204)) {
    jj_scanpos = xsp;
    if (jj_scan_token(205)) {
    jj_scanpos = xsp;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_scan_token(207)) {
    jj_scanpos = xsp;
    if (jj_scan_token(208)) {
    jj_scanpos = xsp;
    if (jj_scan_token(209)) {
    jj_scanpos = xsp;
    if (jj_scan_token(210)) {
    jj_scanpos = xsp;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(214)) {
    jj_scanpos = xsp;
    if (jj_scan_token(215)) {
    jj_scanpos = xsp;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) {
    jj_scanpos = xsp;
    if (jj_scan_token(221)) {
    jj_scanpos = xsp;
    if (jj_scan_token(222)) {
    jj_scanpos = xsp;
    if (jj_scan_token(223)) {
    jj_scanpos = xsp;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_scan_token(228)) {
    jj_scanpos = xsp;
    if (jj_scan_token(229)) {
    jj_scanpos = xsp;
    if (jj_scan_token(230)) {
    jj_scanpos = xsp;
    if (jj_scan_token(231)) {
    jj_scanpos = xsp;
    if (jj_scan_token(232)) {
    jj_scanpos = xsp;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(234)) {
    jj_scanpos = xsp;
    if (jj_scan_token(235)) {
    jj_scanpos = xsp;
    if (jj_scan_token(236)) {
    jj_scanpos = xsp;
    if (jj_scan_token(237)) {
    jj_scanpos = xsp;
    if (jj_scan_token(238)) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) {
    jj_scanpos = xsp;
    if (jj_scan_token(240)) {
    jj_scanpos = xsp;
    if (jj_scan_token(241)) {
    jj_scanpos = xsp;
    if (jj_scan_token(242)) {
    jj_scanpos = xsp;
    if (jj_scan_token(243)) {
    jj_scanpos = xsp;
    if (jj_scan_token(244)) {
    jj_scanpos = xsp;
    if (jj_scan_token(245)) {
    jj_scanpos = xsp;
    if (jj_scan_token(246)) {
    jj_scanpos = xsp;
    if (jj_scan_token(247)) {
    jj_scanpos = xsp;
    if (jj_scan_token(248)) {
    jj_scanpos = xsp;
    if (jj_scan_token(249)) {
    jj_scanpos = xsp;
    if (jj_scan_token(227)) {
    jj_scanpos = xsp;
    if (jj_scan_token(250)) {
    jj_scanpos = xsp;
    if (jj_scan_token(251)) {
    jj_scanpos = xsp;
    if (jj_scan_token(257)) {
    jj_scanpos = xsp;
    if (jj_scan_token(258)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  public PLSQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[169];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40,0x18,0x18,0x2,0x4,0x18,0x20,0x0,0x0,0x300808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300808,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x80,0x0,0x0,0x0,0x0,0x0,0x300808,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x300808,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x300808,0x300808,0x0,0x0,0x20,0x300808,0x0,0x300808,0x0,0x300808,0x0,0x400,0x300808,0x0,0x400,0x300808,0x0,0x300808,0x0,0x300008,0x0,0x0,0x0,0x0,0x300008,0x80,0x0,0x0,0x0,0x80,0x0,0x0,0x300808,0x0,0x0,0x0,0x300808,0x8,0x0,0x80,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x8,0x80,0x0,0x8,0x0,0x300008,0x0,0x0,0xe000,0xe000,0xf0000,0x0,0x0,0xf0000,0x700000,0x700000,0x800002,0x800002,0x300000,0x300008,0x8,0x80,0x0,0x8,0xc,0x0,0x0,0x204,0x4,0x300008,0x80,0x0,0x0,0x100,0x100,0x0,0x80,0x300000,0x300000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2400010,0x0,0x0,0x0,0x60,0x100000,0x20000,0xffbffff0,0x0,0x0,0x20000,0x2400010,0x0,0x400000,0xffbffff0,0xffbffff0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x2400010,0x0,0xffbffff0,0xfffffff0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000010,0x0,0x0,0x2400010,0x0,0xffbffff0,0x0,0x0,0x2000010,0x41000000,0x4000000,0x0,0x0,0x0,0x0,0x2400010,0x2400010,0x0,0x0,0x0,0x2400010,0x0,0x2400010,0x0,0x2400010,0x0,0x0,0x2400010,0x0,0x0,0x2400010,0x0,0x2400010,0x0,0x2000010,0x0,0x0,0x0,0x2000010,0x2000010,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x2400010,0x0,0x0,0x0,0x2400010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000010,0x0,0x4000,0x0,0x0,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x2000010,0x2000010,0x0,0x2000010,0x0,0x0,0x0,0x0,0x0,0x0,0x2000010,0x0,0x0,0x0,0x0,0x0,0xffbffff0,0x0,0x0,0x0,0x780,0xffbffff0,0x2000010,0xcf310ff0,0xc5110000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x80000800,0x80000000,0x0,0x0,0x80000000,0x0,0x800,0x20000,0x80120082,0x20000000,0x0,0x800,0x0,0x0,0x0,0xefbfffdf,0x0,0x800,0x0,0x80120082,0x20000000,0x0,0xefbfffdf,0xefbfffdf,0x0,0x4800,0x0,0x800,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x80120082,0x20000000,0xefbfffdf,0xefbfffdf,0x0,0x0,0x0,0x80000,0x80000,0x0,0x800,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x80120082,0x20000000,0xefbfffdf,0x0,0x0,0x0,0x40000,0x8000,0x0,0x0,0x0,0x0,0x80120082,0x80120082,0x0,0x80100080,0x0,0x80120082,0x8000000,0x80120082,0x4000000,0x80120082,0x0,0x0,0x80120082,0x0,0x0,0x80120082,0x0,0x80120082,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x80120082,0x20000000,0x0,0x0,0x80020002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0xefbfffdf,0x0,0x0,0x0,0x0,0xefbfffdf,0x0,0x8915e4da,0x4a000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44109b2,0x0,0x0,0x0,0x0,0x0,0x10000000,0xffeffbff,0x0,0x0,0x10000000,0x44109b2,0x0,0x0,0xffeffbff,0xffefffff,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x44109b2,0x0,0xffeffbff,0xffefffff,0x10000000,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000010,0x0,0x0,0x44109b2,0x0,0xffeffbff,0x0,0x0,0x4000000,0x800040,0x0,0x4000000,0x0,0x0,0x0,0x44109b2,0x44109b2,0x0,0x400000,0x0,0x44109b2,0x0,0x44109b2,0x0,0x44109b2,0x0,0x0,0x44109b2,0x0,0x0,0x44109b2,0x0,0x44109b2,0x0,0x4000010,0x0,0x0,0x0,0x4000000,0x4000010,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x44109b2,0x0,0x0,0x10180,0x4000832,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x10000000,0x4000010,0x0,0x0,0x10000000,0x10000000,0x40200,0x0,0x40200,0x40200,0x0,0x0,0x0,0x0,0x0,0x4000010,0x4000010,0x0,0x4000010,0x0,0x0,0x10,0x10,0x0,0x0,0x4000010,0x0,0x0,0x0,0x0,0x0,0xffeffbff,0x0,0x0,0x0,0x1000000,0xffeffbff,0x4000000,0xe5a2c55f,0x4808040,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x10000000,0x10000000,0x0,0x0,0x10000000,0x0,0x0,0x0,0xc05210a8,0x0,0x0,0x0,0x0,0x0,0x0,0xffffff7d,0x0,0x0,0x0,0xc05210a8,0x0,0x0,0xffffff7d,0xffffff7d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc05210a8,0x0,0xffffff7d,0xffffff7d,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x20000,0x20000,0x0,0x0,0x80421020,0x0,0x0,0xc05210a8,0x0,0xffffff7d,0x0,0x0,0x80021020,0x1018000,0x0,0x0,0x0,0x0,0x0,0xc05210a8,0xc05210a8,0x0,0x88,0x0,0xc05210a8,0x0,0xc05210a8,0x0,0xc05210a8,0x0,0x0,0xc05210a8,0x0,0x0,0xc05210a8,0x0,0xc05210a8,0x0,0x80521020,0x0,0x0,0x0,0x80021020,0x80521020,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0xc05210a8,0x0,0x0,0x0,0xc0521020,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x80521020,0x0,0x0,0x0,0x0,0x100001,0x100000,0x1,0x100001,0x0,0x0,0x1000,0x1000,0x0,0x80521020,0x80521020,0x0,0x80421020,0x0,0x0,0x400000,0x0,0x0,0x0,0x80521020,0x0,0x100000,0x500000,0x0,0x0,0xffffff7d,0x0,0x0,0x0,0x0,0xffffff7d,0x80021020,0xe78fdd76,0x701c810,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x40040,0x40000,0x0,0x0,0x40000,0x0,0x0,0x0,0x14290000,0x0,0x2,0x0,0x0,0x0,0x0,0xfffdbb7f,0x2,0x0,0x0,0x14290000,0x0,0x0,0xfffdbb7f,0xfffffb7f,0x4000,0x20000,0x2,0x0,0x20000,0x0,0x0,0x4000000,0x0,0x80,0x400,0x0,0x14290000,0x0,0xfffdbb7f,0xfffffb7f,0x0,0x20,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x210000,0x0,0x0,0x14290000,0x0,0xfffdbb7f,0x0,0x0,0x1210000,0x403800,0x41200000,0x0,0x0,0x0,0x2,0x14290000,0x14290000,0x0,0x10000000,0x0,0x14290000,0x0,0x14290000,0x0,0x14290000,0x8000000,0x0,0x14290000,0x0,0x0,0x14290000,0x0,0x14290000,0x0,0x210000,0x0,0x0,0x0,0x210000,0x210000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14290000,0x0,0x0,0x0,0x4290000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x210000,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x210000,0x210000,0x0,0x210000,0x0,0x0,0x0,0x0,0x0,0x0,0x210000,0x0,0x0,0x0,0x0,0x0,0xfffdbb7f,0x0,0x0,0x0,0x0,0xfffdbb7f,0x210000,0xfff9f978,0xe1e03800,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x8000020,0x8000020,0x0,0x0,0x8000020,0x0,0x20000000,0x0,0xc0040e2a,0x0,0x0,0x0,0x0,0x0,0x0,0xefffffff,0x0,0x0,0x0,0xc0040e2a,0x0,0x0,0xefffffff,0xefffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0040e2a,0x0,0xefffffff,0xefffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0040e08,0x0,0x0,0xc0040e2a,0x0,0xefffffff,0x80000001,0x0,0x80040e00,0x80,0x80000,0x0,0x400000,0x0,0x0,0xc0040e2a,0xc0040e2a,0x0,0x2a,0x0,0xc0040e2a,0x0,0xc0040e2a,0x0,0xc0040e2a,0x0,0x0,0xc0040e2a,0x0,0x0,0xc0040e2a,0x0,0xc0040e2a,0x0,0xc0040e08,0x0,0x0,0x0,0x80040e00,0xc0040e08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0040e2a,0x0,0x0,0x0,0xc0040e08,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x80000,0x80004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0040e08,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0040e08,0xc0040e08,0x0,0xc0040e00,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0xc0040e08,0x0,0x0,0x0,0x0,0x0,0xefffffff,0x0,0x0,0x0,0x0,0xefffffff,0x80040e00,0xe7e7ed97,0x7e800a5,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8418,0x0,0x0,0x0,0x0,0x0,0x0,0xffffff9,0x0,0x0,0x0,0x8418,0x0,0x0,0xffffff9,0xffffff9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8418,0x0,0xffffff9,0xffffff9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70000000,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x8400,0x4,0x0,0x8418,0x0,0xffffff9,0x0,0x0,0x8400,0x8001d80,0x7fe060,0x0,0x0,0x0,0x0,0x8418,0x8418,0x4,0x10,0x0,0x8418,0x0,0x8418,0x0,0x8418,0x0,0x0,0x8418,0x0,0x0,0x8418,0x0,0x8418,0x0,0x8400,0x4,0x4,0x4,0x8400,0x8400,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x8418,0x0,0x0,0x0,0x8408,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8400,0x8400,0x0,0x8400,0x0,0x0,0x0,0x0,0x0,0x0,0x8400,0x0,0x0,0x0,0x0,0x0,0xffffff9,0x0,0x0,0x0,0x0,0xffffff9,0x8400,0xdffffe9,0xffbffe0,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x41000,0x41000,0x0,0x0,0x41000,0x0,0x0,0x0,0x63002,0x0,0x0,0x0,0x0,0x0,0x0,0x1006,0x0,0x0,0x0,0x63002,0x0,0x0,0x1006,0x1006,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63002,0x0,0x1006,0x1006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x1,0x0,0x63002,0x0,0x0,0x63002,0x0,0x1006,0x0,0x0,0x1002,0x0,0x0,0x0,0x0,0x0,0x0,0x63002,0x63002,0x0,0x0,0x0,0x63002,0x0,0x63002,0x0,0x63002,0x0,0x0,0x63002,0x1000,0x0,0x63002,0x1000,0x63002,0x1000,0x63002,0x0,0x1000,0x1000,0x1002,0x63002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63002,0x0,0x1000,0x0,0x63002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x63002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x63002,0x63002,0x0,0x63002,0x0,0x0,0x62000,0x0,0x0,0x0,0x63002,0x0,0x0,0x0,0x0,0x0,0x41006,0x0,0x0,0x0,0x0,0x1006,0x1002,0x1000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[36];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PLSQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PLSQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PLSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PLSQLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PLSQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PLSQLParser(PLSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PLSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 169; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[275];
    for (int i = 0; i < 275; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 169; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 275; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 36; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
